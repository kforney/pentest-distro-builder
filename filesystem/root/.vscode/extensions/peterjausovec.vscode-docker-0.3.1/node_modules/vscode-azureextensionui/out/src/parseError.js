"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const localize_1 = require("./localize");
// tslint:disable:no-unsafe-any
// tslint:disable:no-any
function parseError(error) {
    let errorType = '';
    let message = '';
    if (typeof (error) === 'object' && error !== null) {
        if (error.constructor !== Object) {
            errorType = error.constructor.name;
        }
        // See https://github.com/Microsoft/vscode-azureappservice/issues/419 for an example error that requires these 'unpack's
        error = unpackErrorFromField(error, 'value');
        error = unpackErrorFromField(error, '_value');
        errorType = getCode(error, errorType);
        message = getMessage(error, message);
        if (!errorType || !message || /error.*deserializing.*response.*body/i.test(message)) {
            error = unpackErrorFromField(error, 'response');
            error = unpackErrorFromField(error, 'body');
            errorType = getCode(error, errorType);
            message = getMessage(error, message);
        }
        // Azure errors have a JSON object in the message
        let parsedMessage = parseIfJson(error.message);
        // For some reason, the message is sometimes serialized twice and we need to parse it again
        parsedMessage = parseIfJson(parsedMessage);
        // Extract out the "internal" error if it exists
        if (parsedMessage && parsedMessage.error) {
            parsedMessage = parsedMessage.error;
        }
        errorType = getCode(parsedMessage, errorType);
        message = getMessage(parsedMessage, message);
        message = message || convertCodeToError(errorType) || JSON.stringify(error);
    }
    else if (error !== undefined && error !== null && error.toString && error.toString().trim() !== '') {
        errorType = typeof (error);
        message = error.toString();
    }
    message = unpackErrorsInMessage(message);
    // tslint:disable-next-line:strict-boolean-expressions
    errorType = errorType || typeof (error);
    message = message || localize_1.localize('unknownError', 'Unknown Error');
    return {
        errorType: errorType,
        message: message,
        // NOTE: Intentionally not using 'error instanceof UserCancelledError' because that doesn't work if multiple versions of the UI package are used in one extension
        // See https://github.com/Microsoft/vscode-azuretools/issues/51 for more info
        isUserCancelledError: errorType === 'UserCancelledError'
    };
}
exports.parseError = parseError;
function convertCodeToError(errorType) {
    if (errorType) {
        const code = parseInt(errorType, 10);
        if (!isNaN(code)) {
            return localize_1.localize('failedWithCode', 'Failed with code "{0}".', code);
        }
    }
    return undefined;
}
function parseIfJson(o) {
    if (typeof o === 'string' && o.indexOf('{') >= 0) {
        try {
            return JSON.parse(o);
        }
        catch (err) {
            // ignore
        }
    }
    return o;
}
function getMessage(o, defaultMessage) {
    return (o && (o.message || o.Message || (typeof parseIfJson(o.body) === 'string' && o.body))) || defaultMessage;
}
function getCode(o, defaultCode) {
    const code = o && (o.code || o.Code || o.errorCode || o.statusCode);
    return code ? String(code) : defaultCode;
}
function unpackErrorsInMessage(message) {
    // Handle messages like this from Azure (just handle first error for now)
    //   ["Errors":["The offer should have valid throughput]]",
    if (message) {
        const errorsInMessage = message.match(/"Errors":\[\s*"([^"]+)"/);
        if (errorsInMessage !== null) {
            const [, firstError] = errorsInMessage;
            return firstError;
        }
    }
    return message;
}
function unpackErrorFromField(error, prop) {
    // Handle objects from Azure SDK that contain the error information in a "body" field (serialized or not)
    let field = error && error[prop];
    if (field) {
        if (typeof field === 'string' && field.indexOf('{') >= 0) {
            try {
                field = JSON.parse(field);
            }
            catch (err) {
                // Ignore
            }
        }
        if (typeof field === 'object') {
            return field;
        }
    }
    return error;
}
//# sourceMappingURL=parseError.js.map