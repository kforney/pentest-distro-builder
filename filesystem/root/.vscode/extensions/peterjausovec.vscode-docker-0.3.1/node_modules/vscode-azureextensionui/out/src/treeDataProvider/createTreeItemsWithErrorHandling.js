"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const localize_1 = require("../localize");
class InvalidTreeItem {
    // tslint:disable-next-line:no-any
    constructor(label, error, contextValue, description = localize_1.localize('invalid', 'Invalid')) {
        this.label = label;
        this._error = error;
        this.contextValue = contextValue;
        this.description = description;
    }
    get iconPath() {
        return path.join(__filename, '..', '..', '..', '..', 'resources', 'warning.svg');
    }
    loadMoreChildren() {
        return __awaiter(this, void 0, void 0, function* () {
            throw this._error;
        });
    }
    hasMoreChildren() {
        return false;
    }
    isAncestorOf() {
        // never display invalid nodes in node picker
        return false;
    }
}
function createTreeItemsWithErrorHandling(sourceArray, invalidContextValue, createTreeItem, getLabelOnError) {
    return __awaiter(this, void 0, void 0, function* () {
        const treeItems = [];
        // tslint:disable-next-line:no-any
        let unknownError;
        yield Promise.all(sourceArray.map((source) => __awaiter(this, void 0, void 0, function* () {
            try {
                const item = yield createTreeItem(source);
                if (item) {
                    treeItems.push(item);
                }
            }
            catch (error) {
                let name;
                try {
                    name = yield getLabelOnError(source);
                }
                catch (_a) {
                    // ignore
                }
                if (name) {
                    treeItems.push(new InvalidTreeItem(name, error, invalidContextValue));
                }
                else if (error && !unknownError) {
                    unknownError = error;
                }
            }
        })));
        if (unknownError) {
            // Display a generic error node if there are any unknown items. Only the first error will be displayed
            const message = localize_1.localize('cantShowItems', 'Some items could not be displayed');
            treeItems.push(new InvalidTreeItem(message, unknownError, invalidContextValue, ''));
        }
        return treeItems;
    });
}
exports.createTreeItemsWithErrorHandling = createTreeItemsWithErrorHandling;
//# sourceMappingURL=createTreeItemsWithErrorHandling.js.map