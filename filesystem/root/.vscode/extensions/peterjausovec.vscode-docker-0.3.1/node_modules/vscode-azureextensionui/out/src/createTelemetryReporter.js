"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const console = require("console");
const process = require("process");
const vscode_extension_telemetry_1 = require("vscode-extension-telemetry");
const extensionVariables_1 = require("./extensionVariables");
const getPackageInfo_1 = require("./getPackageInfo");
const debugTelemetryEnabled = !!process.env.DEBUGTELEMETRY;
class DebugReporter {
    constructor(_extensionName, _extensionVersion) {
        this._extensionName = _extensionName;
        this._extensionVersion = _extensionVersion;
    }
    sendTelemetryEvent(eventName, properties, measures) {
        try {
            // tslint:disable-next-line:strict-boolean-expressions
            const propertiesString = JSON.stringify(properties || {});
            // tslint:disable-next-line:strict-boolean-expressions
            const measuresString = JSON.stringify(measures || {});
            // tslint:disable-next-line:no-console
            console.log(`** TELEMETRY("${this._extensionName}/${eventName}", ${this._extensionVersion}) properties=${propertiesString}, measures=${measuresString}`);
        }
        catch (error) {
            console.error(error);
        }
    }
}
function createTelemetryReporter(ctx) {
    assert(extensionVariables_1.extInitialized, 'registerUIExtensionVariables must be called first');
    const { extensionName, extensionVersion, aiKey } = getPackageInfo_1.getPackageInfo(ctx);
    if (debugTelemetryEnabled || !aiKey) {
        console.warn(aiKey ? `${extensionName}: DEBUGTELEMETRY mode enabled - not sending telemetry` : 'Unable to obtain package info, cannot send telemetry');
        return new DebugReporter(extensionName, extensionVersion);
    }
    else {
        const reporter = new vscode_extension_telemetry_1.default(extensionName, extensionVersion, aiKey);
        ctx.subscriptions.push(reporter);
        return reporter;
    }
}
exports.createTelemetryReporter = createTelemetryReporter;
//# sourceMappingURL=createTelemetryReporter.js.map