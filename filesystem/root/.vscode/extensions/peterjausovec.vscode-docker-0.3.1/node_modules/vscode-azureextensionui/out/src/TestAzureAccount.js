"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const azure_arm_resource_1 = require("azure-arm-resource");
const ms_rest_azure_1 = require("ms-rest-azure");
const vscode_1 = require("vscode");
const errors_1 = require("./errors");
const localize_1 = require("./localize");
class TestAzureAccount {
    constructor() {
        this.subscriptions = [];
        this.status = 'LoggedOut';
        this.onStatusChangedEmitter = new vscode_1.EventEmitter();
        this.onStatusChanged = this.onStatusChangedEmitter.event;
        this.onFiltersChangedEmitter = new vscode_1.EventEmitter();
        this.onFiltersChanged = this.onFiltersChangedEmitter.event;
        this.filters = [];
    }
    signIn() {
        return __awaiter(this, void 0, void 0, function* () {
            const clientId = process.env.SERVICE_PRINCIPAL_CLIENT_ID;
            const secret = process.env.SERVICE_PRINCIPAL_SECRET;
            const domain = process.env.SERVICE_PRINCIPAL_DOMAIN;
            if (!clientId || !secret || !domain) {
                throw new Error(localize_1.localize('travisOnly', 'TestAzureAccount cannot be used without the following environment variables: SERVICE_PRINCIPAL_CLIENT_ID, SERVICE_PRINCIPAL_SECRET, SERVICE_PRINCIPAL_DOMAIN'));
            }
            this.changeStatus('LoggingIn');
            const credentials = (yield ms_rest_azure_1.loginWithServicePrincipalSecret(clientId, secret, domain));
            const subscriptionClient = new azure_arm_resource_1.SubscriptionClient(credentials);
            const subscriptions = yield subscriptionClient.subscriptions.list();
            // returns an array with id, subscriptionId, displayName
            const tenants = yield subscriptionClient.tenants.list();
            if (tenants[0].id) {
                const tenantId = tenants[0].id;
                const session = {
                    environment: credentials.environment,
                    userId: '',
                    tenantId: tenantId,
                    credentials: credentials
                };
                if (subscriptions[0].id && subscriptions[0].displayName && subscriptions[0].subscriptionId) {
                    const testAzureSubscription = { session: session, subscription: subscriptions[0] };
                    this.subscriptions.push(testAzureSubscription);
                    this.changeStatus('LoggedIn');
                    this.changeFilter(testAzureSubscription);
                }
                else {
                    throw new errors_1.ArgumentError(subscriptions[0]);
                }
            }
            else {
                throw new errors_1.ArgumentError(tenants[0]);
            }
        });
    }
    signOut() {
        this.changeStatus('LoggedOut');
        this.changeFilter();
        this.subscriptions = [];
    }
    getSubscriptionCredentials() {
        this.verifySubscription();
        return this.subscriptions[0].session.credentials;
    }
    getSubscriptionId() {
        this.verifySubscription();
        if (this.subscriptions[0].subscription.subscriptionId) {
            // tslint:disable-next-line:no-non-null-assertion
            return this.subscriptions[0].subscription.subscriptionId;
        }
        else {
            throw new errors_1.ArgumentError(this.subscriptions[0].subscription);
        }
    }
    changeStatus(newStatus) {
        this.status = newStatus;
        this.onStatusChangedEmitter.fire(this.status);
    }
    changeFilter(newFilter) {
        if (newFilter) {
            this.filters.push(newFilter);
        }
        else {
            this.filters = [];
        }
        this.onFiltersChangedEmitter.fire();
    }
    verifySubscription() {
        if (this.subscriptions.length === 0) {
            const noSubscription = localize_1.localize('noSubscription', 'No subscription found.  Invoke TestAzureAccount.signIn().');
            throw new Error(noSubscription);
        }
    }
}
exports.TestAzureAccount = TestAzureAccount;
//# sourceMappingURL=TestAzureAccount.js.map