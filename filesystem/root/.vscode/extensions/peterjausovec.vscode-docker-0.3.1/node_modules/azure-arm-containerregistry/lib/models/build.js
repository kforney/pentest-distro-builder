/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Build resource properties
 *
 * @extends models['ProxyResource']
 */
class Build extends models['ProxyResource'] {
  /**
   * Create a Build.
   * @member {string} [buildId] The unique identifier for the build.
   * @member {string} [status] The current status of the build. Possible values
   * include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed',
   * 'Canceled', 'Error', 'Timeout'
   * @member {date} [lastUpdatedTime] The last updated time for the build.
   * @member {string} [buildType] The type of build. Possible values include:
   * 'AutoBuild', 'QuickBuild'
   * @member {date} [createTime] The time the build was created.
   * @member {date} [startTime] The time the build started.
   * @member {date} [finishTime] The time the build finished.
   * @member {array} [outputImages] The list of all images that were generated
   * from the build.
   * @member {string} [buildTask] The build task with which the build was
   * started.
   * @member {object} [imageUpdateTrigger] The image update trigger that caused
   * the build.
   * @member {string} [imageUpdateTrigger.id] The unique ID of the trigger.
   * @member {date} [imageUpdateTrigger.timestamp] The timestamp when the image
   * update happened.
   * @member {array} [imageUpdateTrigger.images] The list of image updates that
   * caused the build.
   * @member {object} [gitCommitTrigger] The git commit trigger that caused the
   * build.
   * @member {string} [gitCommitTrigger.id] The unique ID of the trigger.
   * @member {string} [gitCommitTrigger.commitId] The unique ID that identifies
   * a commit.
   * @member {string} [gitCommitTrigger.repositoryUrl] The repository URL.
   * @member {string} [gitCommitTrigger.branchName] The branch name in the
   * repository.
   * @member {string} [gitCommitTrigger.providerType] The source control
   * provider type.
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled or not. Default value: false .
   * @member {object} [platform] The platform properties against which the
   * build will happen.
   * @member {string} [platform.osType] The operating system type required for
   * the build. Possible values include: 'Windows', 'Linux'
   * @member {number} [platform.cpu] The CPU configuration in terms of number
   * of cores required for the build.
   * @member {string} [provisioningState] The provisioning state of a build.
   * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Build
   *
   * @returns {object} metadata of Build
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Build',
      type: {
        name: 'Composite',
        className: 'Build',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          buildId: {
            required: false,
            serializedName: 'properties.buildId',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          lastUpdatedTime: {
            required: false,
            serializedName: 'properties.lastUpdatedTime',
            type: {
              name: 'DateTime'
            }
          },
          buildType: {
            required: false,
            serializedName: 'properties.buildType',
            type: {
              name: 'String'
            }
          },
          createTime: {
            required: false,
            serializedName: 'properties.createTime',
            type: {
              name: 'DateTime'
            }
          },
          startTime: {
            required: false,
            serializedName: 'properties.startTime',
            type: {
              name: 'DateTime'
            }
          },
          finishTime: {
            required: false,
            serializedName: 'properties.finishTime',
            type: {
              name: 'DateTime'
            }
          },
          outputImages: {
            required: false,
            serializedName: 'properties.outputImages',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ImageDescriptorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ImageDescriptor'
                  }
              }
            }
          },
          buildTask: {
            required: false,
            serializedName: 'properties.buildTask',
            type: {
              name: 'String'
            }
          },
          imageUpdateTrigger: {
            required: false,
            serializedName: 'properties.imageUpdateTrigger',
            type: {
              name: 'Composite',
              className: 'ImageUpdateTrigger'
            }
          },
          gitCommitTrigger: {
            required: false,
            serializedName: 'properties.gitCommitTrigger',
            type: {
              name: 'Composite',
              className: 'GitCommitTrigger'
            }
          },
          isArchiveEnabled: {
            required: false,
            serializedName: 'properties.isArchiveEnabled',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          platform: {
            required: false,
            serializedName: 'properties.platform',
            type: {
              name: 'Composite',
              className: 'PlatformProperties'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Build;
