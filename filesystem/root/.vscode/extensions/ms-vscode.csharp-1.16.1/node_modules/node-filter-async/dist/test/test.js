"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const assert = require("assert");
const main_1 = require("../lib/main");
const nodepath = require("path");
const bluebird_1 = require("bluebird");
const statAsync = bluebird_1.promisify(fs.stat);
const readdirAsync = bluebird_1.promisify(fs.readdir);
describe('filterAsync', () => {
    it('Case 1', () => __awaiter(this, void 0, void 0, function* () {
        const paths = yield readdirAsync('./test/data');
        const index = paths.indexOf('.DS_Store');
        if (index >= 0) {
            paths.splice(index, 1);
        }
        assert.deepEqual(paths.sort(), ['dir1', 'dir2', 'a.txt', 'b.txt'].sort());
        const files = yield main_1.filterAsync(paths, (path) => __awaiter(this, void 0, void 0, function* () {
            const stat = yield statAsync(nodepath.join('./test/data', path));
            return stat.isFile();
        }));
        assert.deepEqual(files.sort(), ['a.txt', 'b.txt'].sort());
    }));
    it('Case 2', () => __awaiter(this, void 0, void 0, function* () {
        const nums = [1, 2, 3, 4];
        const results = yield main_1.filterAsync(nums, (n) => {
            return Promise.resolve(n % 2 === 0);
        });
        assert.deepEqual(results, [2, 4]);
    }));
    it('Indicies', () => __awaiter(this, void 0, void 0, function* () {
        const nums = [1, 2, 3, 4];
        const indicies = {};
        yield main_1.filterAsync(nums, (n, i) => {
            indicies[i] = true;
            return Promise.resolve(n % 2 === 0);
        });
        assert.deepEqual(Object.keys(indicies).sort(), [0, 1, 2, 3]);
    }));
});
//# sourceMappingURL=test.js.map