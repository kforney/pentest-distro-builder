"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const serverUtils = require("../omnisharp/utils");
const protocol_1 = require("../omnisharp/protocol");
const CompositeDisposable_1 = require("../CompositeDisposable");
const loggingEvents_1 = require("../omnisharp/loggingEvents");
function trackCurrentVirtualDocuments(server, eventStream) {
    let registration = server.onProjectAdded(() => __awaiter(this, void 0, void 0, function* () {
        registration.dispose();
        for (let i = 0; i < vscode_1.workspace.textDocuments.length; i++) {
            let document = vscode_1.workspace.textDocuments[i];
            if (!shouldIgnoreDocument(document, server)) {
                yield openVirtualDocument(document, server, eventStream);
            }
        }
    }));
}
function trackFutureVirtualDocuments(server, eventStream) {
    let onTextDocumentOpen = vscode_1.workspace.onDidOpenTextDocument((document) => __awaiter(this, void 0, void 0, function* () {
        if (shouldIgnoreDocument(document, server)) {
            return;
        }
        yield openVirtualDocument(document, server, eventStream);
    }));
    let onTextDocumentClose = vscode_1.workspace.onDidCloseTextDocument((document) => __awaiter(this, void 0, void 0, function* () {
        if (shouldIgnoreDocument(document, server)) {
            return;
        }
        yield closeVirtualDocument(document, server, eventStream);
    }));
    // We already track text document changes for virtual documents in our change forwarder.
    return new CompositeDisposable_1.default(onTextDocumentOpen, onTextDocumentClose);
}
function shouldIgnoreDocument(document, server) {
    if (document.uri.scheme === 'file' || document.languageId !== 'csharp') {
        // We're only interested in non-physical CSharp documents.
        return true;
    }
    if (!server.isRunning()) {
        return true;
    }
    return false;
}
function openVirtualDocument(document, server, eventStream) {
    return __awaiter(this, void 0, void 0, function* () {
        let path = document.uri.fsPath;
        if (!path) {
            path = document.uri.path;
        }
        let req = { FileName: path, changeType: protocol_1.FileChangeType.Create };
        try {
            yield serverUtils.filesChanged(server, [req]);
            yield serverUtils.updateBuffer(server, { Buffer: document.getText(), FileName: document.fileName });
        }
        catch (error) {
            logSynchronizationFailure(document.uri, error, server, eventStream);
        }
    });
}
function closeVirtualDocument(document, server, eventStream) {
    return __awaiter(this, void 0, void 0, function* () {
        let path = document.uri.fsPath;
        if (!path) {
            path = document.uri.path;
        }
        let req = { FileName: path, changeType: protocol_1.FileChangeType.Delete };
        try {
            yield serverUtils.filesChanged(server, [req]);
        }
        catch (error) {
            logSynchronizationFailure(document.uri, error, server, eventStream);
        }
    });
}
function logSynchronizationFailure(uri, error, server, eventStream) {
    if (server.isRunning()) {
        eventStream.post(new loggingEvents_1.DocumentSynchronizationFailure(uri.path, error));
    }
}
function trackVirtualDocuments(server, eventStream) {
    trackCurrentVirtualDocuments(server, eventStream);
    let disposable = trackFutureVirtualDocuments(server, eventStream);
    return disposable;
}
exports.default = trackVirtualDocuments;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbERvY3VtZW50VHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mZWF0dXJlcy92aXJ0dWFsRG9jdW1lbnRUcmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O2dHQUdnRzs7Ozs7Ozs7OztBQUVoRyxtQ0FBb0Q7QUFFcEQsa0RBQWtEO0FBQ2xELG9EQUF1RDtBQUV2RCxnRUFBeUQ7QUFFekQsOERBQTRFO0FBRTVFLHNDQUFzQyxNQUF1QixFQUFFLFdBQXdCO0lBQ25GLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBUyxFQUFFO1FBQ2hELFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsa0JBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JELElBQUksUUFBUSxHQUFHLGtCQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7Z0JBQ3pDLE1BQU0sbUJBQW1CLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQzthQUM1RDtTQUNKO0lBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxxQ0FBcUMsTUFBdUIsRUFBRSxXQUF3QjtJQUNsRixJQUFJLGtCQUFrQixHQUFHLGtCQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBTSxRQUFRLEVBQUMsRUFBRTtRQUN0RSxJQUFJLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUN4QyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFBLENBQUMsQ0FBQztJ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