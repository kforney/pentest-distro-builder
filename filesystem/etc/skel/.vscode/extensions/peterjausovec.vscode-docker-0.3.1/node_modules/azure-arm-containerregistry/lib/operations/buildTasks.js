/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Lists all the build tasks for a specified container registry.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] The build task filter to apply on the
 * operation.
 *
 * @param {string} [options.skipToken] $skipToken is supported on get list of
 * build tasks, which provides the next page in the list of tasks.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTaskListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, registryName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let skipToken = (options && options.skipToken !== undefined) ? options.skipToken : undefined;
  let apiVersion = '2018-02-01-preview';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (registryName === null || registryName === undefined || typeof registryName.valueOf() !== 'string') {
      throw new Error('registryName cannot be null or undefined and it must be of type string.');
    }
    if (registryName !== null && registryName !== undefined) {
      if (registryName.length > 50)
      {
        throw new Error('"registryName" should satisfy the constraint - "MaxLength": 50');
      }
      if (registryName.length < 5)
      {
        throw new Error('"registryName" should satisfy the constraint - "MinLength": 5');
      }
      if (registryName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"registryName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (skipToken !== null && skipToken !== undefined && typeof skipToken.valueOf() !== 'string') {
      throw new Error('skipToken must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{registryName}', encodeURIComponent(registryName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (skipToken !== null && skipToken !== undefined) {
    queryParameters.push('$skipToken=' + encodeURIComponent(skipToken));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTaskListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get the properties of a specified build task.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTask} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, registryName, buildTaskName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-02-01-preview';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (registryName === null || registryName === undefined || typeof registryName.valueOf() !== 'string') {
      throw new Error('registryName cannot be null or undefined and it must be of type string.');
    }
    if (registryName !== null && registryName !== undefined) {
      if (registryName.length > 50)
      {
        throw new Error('"registryName" should satisfy the constraint - "MaxLength": 50');
      }
      if (registryName.length < 5)
      {
        throw new Error('"registryName" should satisfy the constraint - "MinLength": 5');
      }
      if (registryName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"registryName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskName === null || buildTaskName === undefined || typeof buildTaskName.valueOf() !== 'string') {
      throw new Error('buildTaskName cannot be null or undefined and it must be of type string.');
    }
    if (buildTaskName !== null && buildTaskName !== undefined) {
      if (buildTaskName.length > 50)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MaxLength": 50');
      }
      if (buildTaskName.length < 5)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MinLength": 5');
      }
      if (buildTaskName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{registryName}', encodeURIComponent(registryName));
  requestUrl = requestUrl.replace('{buildTaskName}', encodeURIComponent(buildTaskName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates a build task for a container registry with the specified parameters.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} buildTaskCreateParameters The parameters for creating a
 * build task.
 *
 * @param {string} buildTaskCreateParameters.alias The alternative updatable
 * name for a build task.
 *
 * @param {string} [buildTaskCreateParameters.status] The current status of
 * build task. Possible values include: 'Disabled', 'Enabled'
 *
 * @param {object} buildTaskCreateParameters.sourceRepository The properties
 * that describes the source(code) for the build task.
 *
 * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
 * The type of source control service. Possible values include: 'Github',
 * 'VisualStudioTeamService'
 *
 * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
 * full URL to the source code respository
 *
 * @param {boolean}
 * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
 * value of this property indicates whether the source control commit trigger
 * is enabled or not.
 *
 * @param {object}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
 * authorization properties for accessing the source code repository.
 *
 * @param {string}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
 * The type of Auth token. Possible values include: 'PAT', 'OAuth'
 *
 * @param {string}
 * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
 * The access token used to access the source control provider.
 *
 * @param {string}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
 * The refresh token used to refresh the access token.
 *
 * @param {string}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
 * The scope of the access token.
 *
 * @param {number}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
 * Time in seconds that the token remains valid
 *
 * @param {object} buildTaskCreateParameters.platform The platform properties
 * against which the build has to happen.
 *
 * @param {string} buildTaskCreateParameters.platform.osType The operating
 * system type required for the build. Possible values include: 'Windows',
 * 'Linux'
 *
 * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
 * configuration in terms of number of cores required for the build.
 *
 * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
 * seconds.
 *
 * @param {string} buildTaskCreateParameters.location The location of the
 * resource. This cannot be changed after the resource is created.
 *
 * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTask} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreate(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes a specified build task.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, registryName, buildTaskName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, registryName, buildTaskName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Updates a build task with the specified parameters.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} buildTaskUpdateParameters The parameters for updating a
 * build task.
 *
 * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
 * name for a build task.
 *
 * @param {string} [buildTaskUpdateParameters.status] The current status of
 * build task. Possible values include: 'Disabled', 'Enabled'
 *
 * @param {object} [buildTaskUpdateParameters.platform] The platform properties
 * against which the build has to happen.
 *
 * @param {string} buildTaskUpdateParameters.platform.osType The operating
 * system type required for the build. Possible values include: 'Windows',
 * 'Linux'
 *
 * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
 * configuration in terms of number of cores required for the build.
 *
 * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
 * seconds.
 *
 * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
 * that describes the source(code) for the build task.
 *
 * @param {object}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
 * authorization properties for accessing the source code repository.
 *
 * @param {string}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
 * The type of Auth token. Possible values include: 'PAT', 'OAuth'
 *
 * @param {string}
 * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
 * The access token used to access the source control provider.
 *
 * @param {string}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
 * The refresh token used to refresh the access token.
 *
 * @param {string}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
 * The scope of the access token.
 *
 * @param {number}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
 * Time in seconds that the token remains valid
 *
 * @param {boolean}
 * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
 * value of this property indicates whether the source control commit trigger
 * is enabled or not.
 *
 * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTask} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginUpdate(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Get the source control properties for a build task.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SourceRepositoryProperties} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listSourceRepositoryProperties(resourceGroupName, registryName, buildTaskName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-02-01-preview';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (registryName === null || registryName === undefined || typeof registryName.valueOf() !== 'string') {
      throw new Error('registryName cannot be null or undefined and it must be of type string.');
    }
    if (registryName !== null && registryName !== undefined) {
      if (registryName.length > 50)
      {
        throw new Error('"registryName" should satisfy the constraint - "MaxLength": 50');
      }
      if (registryName.length < 5)
      {
        throw new Error('"registryName" should satisfy the constraint - "MinLength": 5');
      }
      if (registryName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"registryName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskName === null || buildTaskName === undefined || typeof buildTaskName.valueOf() !== 'string') {
      throw new Error('buildTaskName cannot be null or undefined and it must be of type string.');
    }
    if (buildTaskName !== null && buildTaskName !== undefined) {
      if (buildTaskName.length > 50)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MaxLength": 50');
      }
      if (buildTaskName.length < 5)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MinLength": 5');
      }
      if (buildTaskName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/listSourceRepositoryProperties';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{registryName}', encodeURIComponent(registryName));
  requestUrl = requestUrl.replace('{buildTaskName}', encodeURIComponent(buildTaskName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SourceRepositoryProperties']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates a build task for a container registry with the specified parameters.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} buildTaskCreateParameters The parameters for creating a
 * build task.
 *
 * @param {string} buildTaskCreateParameters.alias The alternative updatable
 * name for a build task.
 *
 * @param {string} [buildTaskCreateParameters.status] The current status of
 * build task. Possible values include: 'Disabled', 'Enabled'
 *
 * @param {object} buildTaskCreateParameters.sourceRepository The properties
 * that describes the source(code) for the build task.
 *
 * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
 * The type of source control service. Possible values include: 'Github',
 * 'VisualStudioTeamService'
 *
 * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
 * full URL to the source code respository
 *
 * @param {boolean}
 * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
 * value of this property indicates whether the source control commit trigger
 * is enabled or not.
 *
 * @param {object}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
 * authorization properties for accessing the source code repository.
 *
 * @param {string}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
 * The type of Auth token. Possible values include: 'PAT', 'OAuth'
 *
 * @param {string}
 * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
 * The access token used to access the source control provider.
 *
 * @param {string}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
 * The refresh token used to refresh the access token.
 *
 * @param {string}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
 * The scope of the access token.
 *
 * @param {number}
 * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
 * Time in seconds that the token remains valid
 *
 * @param {object} buildTaskCreateParameters.platform The platform properties
 * against which the build has to happen.
 *
 * @param {string} buildTaskCreateParameters.platform.osType The operating
 * system type required for the build. Possible values include: 'Windows',
 * 'Linux'
 *
 * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
 * configuration in terms of number of cores required for the build.
 *
 * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
 * seconds.
 *
 * @param {string} buildTaskCreateParameters.location The location of the
 * resource. This cannot be changed after the resource is created.
 *
 * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTask} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreate(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-02-01-preview';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (registryName === null || registryName === undefined || typeof registryName.valueOf() !== 'string') {
      throw new Error('registryName cannot be null or undefined and it must be of type string.');
    }
    if (registryName !== null && registryName !== undefined) {
      if (registryName.length > 50)
      {
        throw new Error('"registryName" should satisfy the constraint - "MaxLength": 50');
      }
      if (registryName.length < 5)
      {
        throw new Error('"registryName" should satisfy the constraint - "MinLength": 5');
      }
      if (registryName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"registryName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskName === null || buildTaskName === undefined || typeof buildTaskName.valueOf() !== 'string') {
      throw new Error('buildTaskName cannot be null or undefined and it must be of type string.');
    }
    if (buildTaskName !== null && buildTaskName !== undefined) {
      if (buildTaskName.length > 50)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MaxLength": 50');
      }
      if (buildTaskName.length < 5)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MinLength": 5');
      }
      if (buildTaskName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskCreateParameters === null || buildTaskCreateParameters === undefined) {
      throw new Error('buildTaskCreateParameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{registryName}', encodeURIComponent(registryName));
  requestUrl = requestUrl.replace('{buildTaskName}', encodeURIComponent(buildTaskName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (buildTaskCreateParameters !== null && buildTaskCreateParameters !== undefined) {
      let requestModelMapper = new client.models['BuildTask']().mapper();
      requestModel = client.serialize(requestModelMapper, buildTaskCreateParameters, 'buildTaskCreateParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(buildTaskCreateParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a specified build task.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, registryName, buildTaskName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-02-01-preview';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (registryName === null || registryName === undefined || typeof registryName.valueOf() !== 'string') {
      throw new Error('registryName cannot be null or undefined and it must be of type string.');
    }
    if (registryName !== null && registryName !== undefined) {
      if (registryName.length > 50)
      {
        throw new Error('"registryName" should satisfy the constraint - "MaxLength": 50');
      }
      if (registryName.length < 5)
      {
        throw new Error('"registryName" should satisfy the constraint - "MinLength": 5');
      }
      if (registryName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"registryName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskName === null || buildTaskName === undefined || typeof buildTaskName.valueOf() !== 'string') {
      throw new Error('buildTaskName cannot be null or undefined and it must be of type string.');
    }
    if (buildTaskName !== null && buildTaskName !== undefined) {
      if (buildTaskName.length > 50)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MaxLength": 50');
      }
      if (buildTaskName.length < 5)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MinLength": 5');
      }
      if (buildTaskName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{registryName}', encodeURIComponent(registryName));
  requestUrl = requestUrl.replace('{buildTaskName}', encodeURIComponent(buildTaskName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates a build task with the specified parameters.
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the container registry belongs.
 *
 * @param {string} registryName The name of the container registry.
 *
 * @param {string} buildTaskName The name of the container registry build task.
 *
 * @param {object} buildTaskUpdateParameters The parameters for updating a
 * build task.
 *
 * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
 * name for a build task.
 *
 * @param {string} [buildTaskUpdateParameters.status] The current status of
 * build task. Possible values include: 'Disabled', 'Enabled'
 *
 * @param {object} [buildTaskUpdateParameters.platform] The platform properties
 * against which the build has to happen.
 *
 * @param {string} buildTaskUpdateParameters.platform.osType The operating
 * system type required for the build. Possible values include: 'Windows',
 * 'Linux'
 *
 * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
 * configuration in terms of number of cores required for the build.
 *
 * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
 * seconds.
 *
 * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
 * that describes the source(code) for the build task.
 *
 * @param {object}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
 * authorization properties for accessing the source code repository.
 *
 * @param {string}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
 * The type of Auth token. Possible values include: 'PAT', 'OAuth'
 *
 * @param {string}
 * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
 * The access token used to access the source control provider.
 *
 * @param {string}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
 * The refresh token used to refresh the access token.
 *
 * @param {string}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
 * The scope of the access token.
 *
 * @param {number}
 * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
 * Time in seconds that the token remains valid
 *
 * @param {boolean}
 * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
 * value of this property indicates whether the source control commit trigger
 * is enabled or not.
 *
 * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTask} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginUpdate(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-02-01-preview';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (registryName === null || registryName === undefined || typeof registryName.valueOf() !== 'string') {
      throw new Error('registryName cannot be null or undefined and it must be of type string.');
    }
    if (registryName !== null && registryName !== undefined) {
      if (registryName.length > 50)
      {
        throw new Error('"registryName" should satisfy the constraint - "MaxLength": 50');
      }
      if (registryName.length < 5)
      {
        throw new Error('"registryName" should satisfy the constraint - "MinLength": 5');
      }
      if (registryName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"registryName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskName === null || buildTaskName === undefined || typeof buildTaskName.valueOf() !== 'string') {
      throw new Error('buildTaskName cannot be null or undefined and it must be of type string.');
    }
    if (buildTaskName !== null && buildTaskName !== undefined) {
      if (buildTaskName.length > 50)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MaxLength": 50');
      }
      if (buildTaskName.length < 5)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "MinLength": 5');
      }
      if (buildTaskName.match(/^[a-zA-Z0-9]*$/) === null)
      {
        throw new Error('"buildTaskName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]*$/');
      }
    }
    if (buildTaskUpdateParameters === null || buildTaskUpdateParameters === undefined) {
      throw new Error('buildTaskUpdateParameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{registryName}', encodeURIComponent(registryName));
  requestUrl = requestUrl.replace('{buildTaskName}', encodeURIComponent(buildTaskName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (buildTaskUpdateParameters !== null && buildTaskUpdateParameters !== undefined) {
      let requestModelMapper = new client.models['BuildTaskUpdateParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, buildTaskUpdateParameters, 'buildTaskUpdateParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(buildTaskUpdateParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTask']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all the build tasks for a specified container registry.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BuildTaskListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BuildTaskListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a BuildTasks. */
class BuildTasks {
  /**
   * Create a BuildTasks.
   * @param {ContainerRegistryManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._get = _get;
    this._create = _create;
    this._deleteMethod = _deleteMethod;
    this._update = _update;
    this._listSourceRepositoryProperties = _listSourceRepositoryProperties;
    this._beginCreate = _beginCreate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginUpdate = _beginUpdate;
    this._listNext = _listNext;
  }

  /**
   * Lists all the build tasks for a specified container registry.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] The build task filter to apply on the
   * operation.
   *
   * @param {string} [options.skipToken] $skipToken is supported on get list of
   * build tasks, which provides the next page in the list of tasks.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTaskListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, registryName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, registryName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all the build tasks for a specified container registry.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] The build task filter to apply on the
   * operation.
   *
   * @param {string} [options.skipToken] $skipToken is supported on get list of
   * build tasks, which provides the next page in the list of tasks.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTaskListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTaskListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, registryName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, registryName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, registryName, options, optionalCallback);
    }
  }

  /**
   * Get the properties of a specified build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get the properties of a specified build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTask} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTask} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, registryName, buildTaskName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, registryName, buildTaskName, options, optionalCallback);
    }
  }

  /**
   * Creates a build task for a container registry with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskCreateParameters The parameters for creating a
   * build task.
   *
   * @param {string} buildTaskCreateParameters.alias The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskCreateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} buildTaskCreateParameters.sourceRepository The properties
   * that describes the source(code) for the build task.
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
   * The type of source control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
   * full URL to the source code respository
   *
   * @param {boolean}
   * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {object} buildTaskCreateParameters.platform The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskCreateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {string} buildTaskCreateParameters.location The location of the
   * resource. This cannot be changed after the resource is created.
   *
   * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a build task for a container registry with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskCreateParameters The parameters for creating a
   * build task.
   *
   * @param {string} buildTaskCreateParameters.alias The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskCreateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} buildTaskCreateParameters.sourceRepository The properties
   * that describes the source(code) for the build task.
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
   * The type of source control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
   * full URL to the source code respository
   *
   * @param {boolean}
   * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {object} buildTaskCreateParameters.platform The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskCreateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {string} buildTaskCreateParameters.location The location of the
   * resource. This cannot be changed after the resource is created.
   *
   * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTask} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTask} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a specified build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a specified build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, registryName, buildTaskName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, registryName, buildTaskName, options, optionalCallback);
    }
  }

  /**
   * Updates a build task with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskUpdateParameters The parameters for updating a
   * build task.
   *
   * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskUpdateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} [buildTaskUpdateParameters.platform] The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskUpdateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
   * that describes the source(code) for the build task.
   *
   * @param {object}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {boolean}
   * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates a build task with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskUpdateParameters The parameters for updating a
   * build task.
   *
   * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskUpdateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} [buildTaskUpdateParameters.platform] The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskUpdateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
   * that describes the source(code) for the build task.
   *
   * @param {object}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {boolean}
   * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTask} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTask} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, optionalCallback);
    }
  }

  /**
   * Get the source control properties for a build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SourceRepositoryProperties>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listSourceRepositoryPropertiesWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listSourceRepositoryProperties(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get the source control properties for a build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SourceRepositoryProperties} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SourceRepositoryProperties} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listSourceRepositoryProperties(resourceGroupName, registryName, buildTaskName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listSourceRepositoryProperties(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listSourceRepositoryProperties(resourceGroupName, registryName, buildTaskName, options, optionalCallback);
    }
  }

  /**
   * Creates a build task for a container registry with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskCreateParameters The parameters for creating a
   * build task.
   *
   * @param {string} buildTaskCreateParameters.alias The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskCreateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} buildTaskCreateParameters.sourceRepository The properties
   * that describes the source(code) for the build task.
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
   * The type of source control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
   * full URL to the source code respository
   *
   * @param {boolean}
   * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {object} buildTaskCreateParameters.platform The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskCreateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {string} buildTaskCreateParameters.location The location of the
   * resource. This cannot be changed after the resource is created.
   *
   * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreate(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a build task for a container registry with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskCreateParameters The parameters for creating a
   * build task.
   *
   * @param {string} buildTaskCreateParameters.alias The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskCreateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} buildTaskCreateParameters.sourceRepository The properties
   * that describes the source(code) for the build task.
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
   * The type of source control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   *
   * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
   * full URL to the source code respository
   *
   * @param {boolean}
   * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {object} buildTaskCreateParameters.platform The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskCreateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {string} buildTaskCreateParameters.location The location of the
   * resource. This cannot be changed after the resource is created.
   *
   * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTask} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTask} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreate(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreate(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreate(resourceGroupName, registryName, buildTaskName, buildTaskCreateParameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a specified build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a specified build task.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, registryName, buildTaskName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, registryName, buildTaskName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, registryName, buildTaskName, options, optionalCallback);
    }
  }

  /**
   * Updates a build task with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskUpdateParameters The parameters for updating a
   * build task.
   *
   * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskUpdateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} [buildTaskUpdateParameters.platform] The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskUpdateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
   * that describes the source(code) for the build task.
   *
   * @param {object}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {boolean}
   * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginUpdateWithHttpOperationResponse(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginUpdate(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates a build task with the specified parameters.
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the container registry belongs.
   *
   * @param {string} registryName The name of the container registry.
   *
   * @param {string} buildTaskName The name of the container registry build task.
   *
   * @param {object} buildTaskUpdateParameters The parameters for updating a
   * build task.
   *
   * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
   * name for a build task.
   *
   * @param {string} [buildTaskUpdateParameters.status] The current status of
   * build task. Possible values include: 'Disabled', 'Enabled'
   *
   * @param {object} [buildTaskUpdateParameters.platform] The platform properties
   * against which the build has to happen.
   *
   * @param {string} buildTaskUpdateParameters.platform.osType The operating
   * system type required for the build. Possible values include: 'Windows',
   * 'Linux'
   *
   * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
   * configuration in terms of number of cores required for the build.
   *
   * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
   * seconds.
   *
   * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
   * that describes the source(code) for the build task.
   *
   * @param {object}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   *
   * @param {string}
   * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
   * The access token used to access the source control provider.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
   * The refresh token used to refresh the access token.
   *
   * @param {string}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
   * The scope of the access token.
   *
   * @param {number}
   * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   *
   * @param {boolean}
   * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
   * value of this property indicates whether the source control commit trigger
   * is enabled or not.
   *
   * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTask} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTask} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdate(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginUpdate(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginUpdate(resourceGroupName, registryName, buildTaskName, buildTaskUpdateParameters, options, optionalCallback);
    }
  }

  /**
   * Lists all the build tasks for a specified container registry.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BuildTaskListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all the build tasks for a specified container registry.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BuildTaskListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BuildTaskListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = BuildTasks;
