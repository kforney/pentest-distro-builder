/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the PushSettings class.
 * @constructor
 * Push settings for the App.
 *
 * @member {boolean} isPushEnabled Gets or sets a flag indicating whether the
 * Push endpoint is enabled.
 *
 * @member {string} [tagWhitelistJson] Gets or sets a JSON string containing a
 * list of tags that are whitelisted for use by the push registration endpoint.
 *
 * @member {string} [tagsRequiringAuth] Gets or sets a JSON string containing a
 * list of tags that require user authentication to be used in the push
 * registration endpoint.
 * Tags can consist of alphanumeric characters and the following:
 * '_', '@', '#', '.', ':', '-'.
 * Validation should be performed at the PushRequestHandler.
 *
 * @member {string} [dynamicTagsJson] Gets or sets a JSON string containing a
 * list of dynamic tags that will be evaluated from user claims in the push
 * registration endpoint.
 *
 */
class PushSettings {
  constructor() {
  }

  /**
   * Defines the metadata of PushSettings
   *
   * @returns {object} metadata of PushSettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PushSettings',
      type: {
        name: 'Composite',
        className: 'PushSettings',
        modelProperties: {
          isPushEnabled: {
            required: true,
            serializedName: 'isPushEnabled',
            type: {
              name: 'Boolean'
            }
          },
          tagWhitelistJson: {
            required: false,
            serializedName: 'tagWhitelistJson',
            type: {
              name: 'String'
            }
          },
          tagsRequiringAuth: {
            required: false,
            serializedName: 'tagsRequiringAuth',
            type: {
              name: 'String'
            }
          },
          dynamicTagsJson: {
            required: false,
            serializedName: 'dynamicTagsJson',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PushSettings;
