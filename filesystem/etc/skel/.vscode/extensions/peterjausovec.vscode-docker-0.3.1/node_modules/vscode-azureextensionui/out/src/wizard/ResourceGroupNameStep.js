"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AzureWizardPromptStep_1 = require("./AzureWizardPromptStep");
const ResourceGroupListStep_1 = require("./ResourceGroupListStep");
class ResourceGroupNameStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.newResourceGroupName) {
                const suggestedName = wizardContext.relatedNameTask ? yield wizardContext.relatedNameTask : undefined;
                wizardContext.newResourceGroupName = (yield extensionVariables_1.ext.ui.showInputBox({
                    value: suggestedName,
                    prompt: 'Enter the name of the new resource group.',
                    validateInput: (value) => __awaiter(this, void 0, void 0, function* () { return yield this.validateResourceGroupName(wizardContext, value); })
                })).trim();
            }
            return wizardContext;
        });
    }
    validateResourceGroupName(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            name = name ? name.trim() : '';
            if (name.length < ResourceGroupListStep_1.resourceGroupNamingRules.minLength || name.length > ResourceGroupListStep_1.resourceGroupNamingRules.maxLength) {
                return localize_1.localize('invalidLength', 'The name must be between {0} and {1} characters.', ResourceGroupListStep_1.resourceGroupNamingRules.minLength, ResourceGroupListStep_1.resourceGroupNamingRules.maxLength);
            }
            else if (name.match(ResourceGroupListStep_1.resourceGroupNamingRules.invalidCharsRegExp) !== null) {
                return localize_1.localize('invalidChars', "The name can only contain alphanumeric characters or the symbols ._-()");
            }
            else if (name.endsWith('.')) {
                return localize_1.localize('invalidEndingChar', "The name cannot end in a period.");
            }
            else if (!(yield ResourceGroupListStep_1.ResourceGroupListStep.isNameAvailable(wizardContext, name))) {
                return localize_1.localize('nameAlreadyExists', 'Resource group "{0}" already exists in subscription "{1}".', name, wizardContext.subscriptionDisplayName);
            }
            else {
                return undefined;
            }
        });
    }
}
exports.ResourceGroupNameStep = ResourceGroupNameStep;
//# sourceMappingURL=ResourceGroupNameStep.js.map