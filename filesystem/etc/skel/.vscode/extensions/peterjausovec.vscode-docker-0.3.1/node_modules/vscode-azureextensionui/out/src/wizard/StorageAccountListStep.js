"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-require-imports
const StorageManagementClient = require("azure-arm-storage");
// tslint:disable-next-line:no-require-imports
const opn = require("opn");
const util_1 = require("util");
const createAzureClient_1 = require("../createAzureClient");
const errors_1 = require("../errors");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AzureWizard_1 = require("./AzureWizard");
const AzureWizardPromptStep_1 = require("./AzureWizardPromptStep");
const LocationListStep_1 = require("./LocationListStep");
const ResourceGroupListStep_1 = require("./ResourceGroupListStep");
const StorageAccountCreateStep_1 = require("./StorageAccountCreateStep");
const StorageAccountNameStep_1 = require("./StorageAccountNameStep");
exports.storageAccountNamingRules = {
    minLength: 3,
    maxLength: 24,
    invalidCharsRegExp: /[^a-z0-9]/,
    lowercaseOnly: true
};
var StorageAccountKind;
(function (StorageAccountKind) {
    StorageAccountKind["Storage"] = "Storage";
    StorageAccountKind["StorageV2"] = "StorageV2";
    StorageAccountKind["BlobStorage"] = "BlobStorage";
})(StorageAccountKind = exports.StorageAccountKind || (exports.StorageAccountKind = {}));
var StorageAccountPerformance;
(function (StorageAccountPerformance) {
    StorageAccountPerformance["Standard"] = "Standard";
    StorageAccountPerformance["Premium"] = "Premium";
})(StorageAccountPerformance = exports.StorageAccountPerformance || (exports.StorageAccountPerformance = {}));
var StorageAccountReplication;
(function (StorageAccountReplication) {
    /**
     * Locally redundant storage
     */
    StorageAccountReplication["LRS"] = "LRS";
    /**
     * Zone-redundant storage
     */
    StorageAccountReplication["ZRS"] = "ZRS";
    /**
     * Geo-redundant storage
     */
    StorageAccountReplication["GRS"] = "GRS";
    /**
     * Read-access geo-redundant storage
     */
    StorageAccountReplication["RAGRS"] = "RAGRS";
})(StorageAccountReplication = exports.StorageAccountReplication || (exports.StorageAccountReplication = {}));
class StorageAccountListStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
    constructor(newAccountDefaults, filters) {
        super();
        this._newAccountDefaults = newAccountDefaults;
        // tslint:disable-next-line:strict-boolean-expressions
        this._filters = filters || {};
    }
    static isNameAvailable(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageClient = createAzureClient_1.createAzureClient(wizardContext, StorageManagementClient);
            return !!(yield storageClient.storageAccounts.checkNameAvailability(name)).nameAvailable;
        });
    }
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.storageAccount && !wizardContext.newStorageAccountName) {
                const client = createAzureClient_1.createAzureClient(wizardContext, StorageManagementClient);
                const quickPickOptions = { placeHolder: 'Select a storage account.', id: `StorageAccountListStep/${wizardContext.subscriptionId}` };
                const result = (yield extensionVariables_1.ext.ui.showQuickPick(this.getQuickPicks(client.storageAccounts.list()), quickPickOptions)).data;
                // If result is a string, that means the user selected the 'Learn more...' pick
                if (util_1.isString(result)) {
                    // tslint:disable-next-line:no-floating-promises
                    opn(result);
                    throw new errors_1.UserCancelledError();
                }
                wizardContext.storageAccount = result;
                if (wizardContext.storageAccount) {
                    // tslint:disable-next-line:no-non-null-assertion
                    yield LocationListStep_1.LocationListStep.setLocation(wizardContext, wizardContext.storageAccount.location);
                }
                else {
                    this.subWizard = new AzureWizard_1.AzureWizard([new StorageAccountNameStep_1.StorageAccountNameStep(), new ResourceGroupListStep_1.ResourceGroupListStep(), new LocationListStep_1.LocationListStep()], [new StorageAccountCreateStep_1.StorageAccountCreateStep(this._newAccountDefaults)], wizardContext);
                }
            }
            return wizardContext;
        });
    }
    getQuickPicks(storageAccountsTask) {
        return __awaiter(this, void 0, void 0, function* () {
            const picks = [{
                    label: localize_1.localize('NewStorageAccount', '$(plus) Create new storage account'),
                    description: '',
                    data: undefined
                }];
            const kindRegExp = new RegExp(`^${convertFilterToPattern(this._filters.kind)}$`, 'i');
            const performanceRegExp = new RegExp(`^${convertFilterToPattern(this._filters.performance)}_.*$`, 'i');
            const replicationRegExp = new RegExp(`^.*_${convertFilterToPattern(this._filters.replication)}$`, 'i');
            let hasFilteredAccounts = false;
            const storageAccounts = yield storageAccountsTask;
            for (const sa of storageAccounts) {
                // tslint:disable:strict-boolean-expressions
                if (!sa.kind || sa.kind.match(kindRegExp) || !sa.sku || sa.sku.name.match(performanceRegExp) || sa.sku.name.match(replicationRegExp)) {
                    // tslint:enable:strict-boolean-expressions
                    hasFilteredAccounts = true;
                    continue;
                }
                picks.push({
                    id: sa.id,
                    // tslint:disable-next-line:no-non-null-assertion
                    label: sa.name,
                    description: '',
                    data: sa
                });
            }
            if (hasFilteredAccounts && this._filters.learnMoreLink) {
                picks.push({
                    label: localize_1.localize('filtered', '$(info) Some storage accounts were filtered. Learn more...'),
                    description: '',
                    suppressPersistence: true,
                    data: this._filters.learnMoreLink
                });
            }
            return picks;
        });
    }
}
exports.StorageAccountListStep = StorageAccountListStep;
function convertFilterToPattern(values) {
    // tslint:disable-next-line:strict-boolean-expressions
    values = values || [];
    return `(${values.join('|')})`;
}
//# sourceMappingURL=StorageAccountListStep.js.map