"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AzureWizard {
    constructor(promptSteps, executeSteps, wizardContext) {
        this._subWizards = [];
        this._promptSteps = promptSteps;
        this._executeSteps = executeSteps;
        this._wizardContext = wizardContext;
    }
    prompt(actionContext) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const step of this._promptSteps) {
                // We want to encourage the least number of prompts possible, so only prompt for a step that doesn't already exist in the parent
                if (this._parentWizard && this._parentWizard.containsStep(step)) {
                    break;
                }
                actionContext.properties.lastStepAttempted = `prompt-${step.constructor.name}`;
                this._wizardContext = yield step.prompt(this._wizardContext);
                if (step.subWizard) {
                    step.subWizard._parentWizard = this;
                    this._subWizards.push(step.subWizard);
                    yield step.subWizard.prompt(actionContext);
                }
            }
            return this._wizardContext;
        });
    }
    execute(actionContext) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const subWizard of this._subWizards) {
                yield subWizard.execute(actionContext);
            }
            for (const step of this._executeSteps) {
                actionContext.properties.lastStepAttempted = `execute-${step.constructor.name}`;
                this._wizardContext = yield step.execute(this._wizardContext);
            }
            return this._wizardContext;
        });
    }
    containsStep(step) {
        return this._promptSteps.some((s) => s.constructor.name === step.constructor.name) || (!!this._parentWizard && this._parentWizard.containsStep(step));
    }
}
exports.AzureWizard = AzureWizard;
//# sourceMappingURL=AzureWizard.js.map