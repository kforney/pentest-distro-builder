"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
class TestUserInput {
    constructor(inputs) {
        this._inputs = inputs;
    }
    showQuickPick(items, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._inputs.length > 0) {
                const input = this._inputs.shift();
                const resolvedItems = yield Promise.resolve(items);
                if (resolvedItems.length === 0) {
                    throw new Error(`No quick pick items found. Placeholder: '${options.placeHolder}'`);
                }
                else if (input) {
                    const resolvedItem = resolvedItems.find((qpi) => qpi.label === input || qpi.description === input);
                    if (resolvedItem) {
                        return resolvedItem;
                    }
                    else {
                        throw new Error(`Did not find quick pick item matching '${input}'. Placeholder: '${options.placeHolder}'`);
                    }
                }
                else {
                    // Use default value if input is undefined
                    return resolvedItems[0];
                }
            }
            throw new Error(`Unexpected call to showQuickPick. Placeholder: '${options.placeHolder}'`);
        });
    }
    showInputBox(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._inputs.length > 0) {
                let result = this._inputs.shift();
                if (result === undefined) {
                    // Use default value if input is undefined
                    result = options.value;
                }
                if (result !== undefined) { // Allow "" as a valid input
                    if (options.validateInput) {
                        const msg = yield Promise.resolve(options.validateInput(result));
                        if (msg !== null && msg !== undefined) {
                            throw new Error(msg);
                        }
                    }
                    return result;
                }
            }
            throw new Error(`Unexpected call to showInputBox. Placeholder: '${options.placeHolder}'. Prompt: '${options.prompt}'`);
        });
    }
    // tslint:disable-next-line:no-any
    showWarningMessage(message, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._inputs.length > 0) {
                const result = this._inputs.shift();
                // tslint:disable-next-line:no-unsafe-any
                const matchingItem = args.find((item) => item.title === result);
                if (matchingItem) {
                    return matchingItem;
                }
            }
            throw new Error(`Unexpected call to showWarningMessage. Message: ${message}`);
        });
    }
    showOpenDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._inputs.length > 0) {
                const result = this._inputs.shift();
                if (result) {
                    return [vscode.Uri.file(result)];
                }
            }
            throw new Error(`Unexpected call to showOpenDialog. Message: ${options.openLabel}`);
        });
    }
}
exports.TestUserInput = TestUserInput;
//# sourceMappingURL=TestUserInput.js.map