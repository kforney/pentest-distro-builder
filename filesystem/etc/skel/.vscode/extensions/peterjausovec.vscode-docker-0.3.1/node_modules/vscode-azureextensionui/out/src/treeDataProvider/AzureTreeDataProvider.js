"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const vscode = require("vscode");
const vscode_1 = require("vscode");
const callWithTelemetryAndErrorHandling_1 = require("../callWithTelemetryAndErrorHandling");
const errors_1 = require("../errors");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const parseError_1 = require("../parseError");
const AzureNode_1 = require("./AzureNode");
const AzureParentNode_1 = require("./AzureParentNode");
const LoadMoreTreeItem_1 = require("./LoadMoreTreeItem");
const RootNode_1 = require("./RootNode");
const SubscriptionNode_1 = require("./SubscriptionNode");
const signInLabel = localize_1.localize('signInLabel', 'Sign in to Azure...');
const createAccountLabel = localize_1.localize('createAccountLabel', 'Create a Free Azure Account...');
const signInCommandId = 'azure-account.login';
const createAccountCommandId = 'azure-account.createAccount';
class AzureTreeDataProvider {
    constructor(resourceProvider, loadMoreCommandId, rootTreeItems, testAccount) {
        this._onDidChangeTreeDataEmitter = new vscode_1.EventEmitter();
        this._onNodeCreateEmitter = new vscode_1.EventEmitter();
        this._disposables = [];
        this._resourceProvider = resourceProvider;
        this._loadMoreCommandId = loadMoreCommandId;
        this._customRootNodes = rootTreeItems ? rootTreeItems.map((treeItem) => new RootNode_1.RootNode(this, treeItem, this._onNodeCreateEmitter)) : [];
        // Rather than expose 'AzureAccount' types in the index.ts contract, simply get it inside of this npm package
        const azureAccountExtension = vscode_1.extensions.getExtension('ms-vscode.azure-account');
        if (testAccount) {
            this._azureAccount = testAccount;
        }
        else if (!azureAccountExtension) {
            throw new Error(localize_1.localize('NoAccountExtensionError', 'The Azure Account Extension is required for the App Service tools.'));
        }
        else {
            this._azureAccount = azureAccountExtension.exports;
        }
        this._disposables.push(this._azureAccount.onFiltersChanged(() => __awaiter(this, void 0, void 0, function* () { return yield this.refresh(undefined, false); })));
        this._disposables.push(this._azureAccount.onStatusChanged((status) => __awaiter(this, void 0, void 0, function* () {
            // Ignore status change to 'LoggedIn' and wait for the 'onFiltersChanged' event to fire instead
            // (so that the tree stays in 'Loading...' state until the filters are actually ready)
            if (status !== 'LoggedIn') {
                yield this.refresh(undefined, false);
            }
        })));
    }
    dispose() {
        for (const disposable of this._disposables) {
            disposable.dispose();
        }
    }
    get onDidChangeTreeData() {
        return this._onDidChangeTreeDataEmitter.event;
    }
    get onNodeCreate() {
        return this._onNodeCreateEmitter.event;
    }
    getTreeItem(node) {
        return {
            label: node.label,
            id: node.id,
            collapsibleState: node instanceof AzureParentNode_1.AzureParentNode ? vscode_1.TreeItemCollapsibleState.Collapsed : undefined,
            contextValue: node.treeItem.contextValue,
            iconPath: node.iconPath,
            command: node.treeItem.commandId ? {
                command: node.treeItem.commandId,
                title: '',
                arguments: [node]
            } : undefined
        };
    }
    getChildren(node) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // tslint:disable:no-var-self
                const thisTree = this;
                return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling('AzureTreeDataProvider.getChildren', function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        const actionContext = this;
                        // tslint:enable:no-var-self
                        actionContext.suppressErrorDisplay = true;
                        actionContext.rethrowError = true;
                        let result;
                        if (node !== undefined) {
                            actionContext.properties.contextValue = node.treeItem.contextValue;
                            const cachedChildren = yield node.getCachedChildren();
                            const hasMoreChildren = node.treeItem.hasMoreChildren();
                            actionContext.properties.hasMoreChildren = String(hasMoreChildren);
                            result = node.creatingNodes.concat(cachedChildren);
                            if (hasMoreChildren) {
                                result = result.concat(new AzureNode_1.AzureNode(node, new LoadMoreTreeItem_1.LoadMoreTreeItem(thisTree._loadMoreCommandId)));
                            }
                        }
                        else { // Root of tree
                            result = yield thisTree.populateRootNodes(actionContext);
                        }
                        this.measurements.childCount = result.length;
                        return result;
                    });
                });
            }
            catch (error) {
                return [new AzureNode_1.AzureNode(node, {
                        label: localize_1.localize('errorNode', 'Error: {0}', parseError_1.parseError(error).message),
                        contextValue: 'azureextensionui.error'
                    })];
            }
        });
    }
    refresh(node, clearCache = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (clearCache) {
                if (!node) {
                    this._subscriptionNodes = [];
                    this._customRootNodes.forEach((rootNode) => {
                        if (rootNode instanceof AzureParentNode_1.AzureParentNode) {
                            rootNode.clearCache();
                        }
                    });
                }
                else {
                    if (node.treeItem.refreshLabel) {
                        yield node.treeItem.refreshLabel(node);
                    }
                    if (node instanceof AzureParentNode_1.AzureParentNode) {
                        node.clearCache();
                    }
                }
            }
            this._onDidChangeTreeDataEmitter.fire(node);
        });
    }
    loadMore(node) {
        return __awaiter(this, void 0, void 0, function* () {
            if (node.parent instanceof AzureParentNode_1.AzureParentNode) {
                yield node.parent.loadMoreChildren();
                this._onDidChangeTreeDataEmitter.fire(node.parent);
            }
        });
    }
    showNodePicker(expectedContextValues, startingNode) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(expectedContextValues)) {
                expectedContextValues = [expectedContextValues];
            }
            // tslint:disable-next-line:strict-boolean-expressions
            let node = startingNode || (yield this.promptForRootNode(expectedContextValues));
            while (!expectedContextValues.some((val) => node.treeItem.contextValue === val)) {
                if (node instanceof AzureParentNode_1.AzureParentNode) {
                    node = yield node.pickChildNode(expectedContextValues);
                }
                else {
                    throw new Error(localize_1.localize('noResourcesError', 'No matching resources found.'));
                }
            }
            return node;
        });
    }
    findNode(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = yield this.getChildren();
            let foundAncestor;
            do {
                foundAncestor = false;
                for (const node of nodes) {
                    if (node.id === id) {
                        return node;
                    }
                    else if (id.startsWith(`${node.id}/`) && node instanceof AzureParentNode_1.AzureParentNode) {
                        // Append '/' to 'node.id' when checking 'startsWith' to ensure its actually an ancestor, rather than a node at the same level that _happens_ to start with the same id
                        // For example, two databases named 'test' and 'test1' as described in this issue: https://github.com/Microsoft/vscode-cosmosdb/issues/488
                        nodes = yield node.getCachedChildren();
                        foundAncestor = true;
                        break;
                    }
                }
            } while (foundAncestor);
            return undefined;
        });
    }
    promptForRootNode(expectedContextValues) {
        return __awaiter(this, void 0, void 0, function* () {
            let picks;
            const initialStatus = this._azureAccount.status;
            if (initialStatus === 'LoggedIn') {
                picks = (yield this.ensureRootNodes()).map((n) => {
                    return {
                        data: n,
                        label: n.treeItem.label,
                        description: n.subscriptionId
                    };
                });
            }
            else if (initialStatus === 'LoggingIn' || initialStatus === 'Initializing') {
                yield vscode.window.withProgress({
                    location: vscode.ProgressLocation.Notification,
                    title: localize_1.localize('waitingForAzureSignin', 'Waiting for Azure sign-in')
                }, (_progress) => __awaiter(this, void 0, void 0, function* () {
                    yield this._azureAccount.waitForSubscriptions();
                }));
                return yield this.promptForRootNode(expectedContextValues);
            }
            else {
                picks = [
                    { label: signInLabel, description: '', data: signInCommandId },
                    { label: createAccountLabel, description: '', data: createAccountCommandId }
                ];
            }
            picks = picks.concat(this._customRootNodes
                .filter((n) => n.includeInNodePicker(expectedContextValues))
                .map((n) => { return { data: n, description: '', label: n.treeItem.label }; }));
            const options = { placeHolder: localize_1.localize('selectSubscription', 'Select a Subscription') };
            const result = picks.length === 1 ? picks[0].data : (yield extensionVariables_1.ext.ui.showQuickPick(picks, options)).data;
            if (typeof result === 'string') {
                yield vscode.commands.executeCommand(result);
                yield this._azureAccount.waitForFilters();
                if (this._azureAccount.status === 'LoggedIn') {
                    yield this.ensureRootNodes();
                    return yield this.promptForRootNode(expectedContextValues);
                }
                else {
                    throw new errors_1.UserCancelledError();
                }
            }
            else {
                return result;
            }
        });
    }
    ensureRootNodes() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._subscriptionNodes) {
                yield this.getChildren();
            }
            // tslint:disable-next-line:no-non-null-assertion
            return this._subscriptionNodes;
        });
    }
    populateRootNodes(actionContext) {
        return __awaiter(this, void 0, void 0, function* () {
            actionContext.properties.isActivationEvent = 'true';
            actionContext.properties.contextValue = 'root';
            actionContext.properties.accountStatus = this._azureAccount.status;
            let nodes;
            const existingSubscriptionNodes = this._subscriptionNodes ? this._subscriptionNodes : [];
            this._subscriptionNodes = [];
            let commandLabel;
            if (this._azureAccount.status === 'Initializing' || this._azureAccount.status === 'LoggingIn') {
                nodes = [new AzureNode_1.AzureNode(undefined, {
                        label: this._azureAccount.status === 'Initializing' ? localize_1.localize('loadingNode', 'Loading...') : localize_1.localize('signingIn', 'Waiting for Azure sign-in...'),
                        commandId: signInCommandId,
                        contextValue: 'azureCommandNode',
                        id: signInCommandId,
                        iconPath: {
                            light: path.join(__filename, '..', '..', '..', '..', 'resources', 'light', 'Loading.svg'),
                            dark: path.join(__filename, '..', '..', '..', '..', 'resources', 'dark', 'Loading.svg')
                        }
                    })];
            }
            else if (this._azureAccount.status === 'LoggedOut') {
                nodes = [
                    new AzureNode_1.AzureNode(undefined, { label: signInLabel, commandId: signInCommandId, contextValue: 'azureCommandNode', id: signInCommandId }),
                    new AzureNode_1.AzureNode(undefined, { label: createAccountLabel, commandId: createAccountCommandId, contextValue: 'azureCommandNode', id: createAccountCommandId })
                ];
            }
            else if (this._azureAccount.filters.length === 0) {
                commandLabel = localize_1.localize('noSubscriptionsNode', 'Select Subscriptions...');
                nodes = [new AzureNode_1.AzureNode(undefined, { label: commandLabel, commandId: 'azure-account.selectSubscriptions', contextValue: 'azureCommandNode', id: 'azure-account.selectSubscriptions' })];
            }
            else {
                this._subscriptionNodes = this._azureAccount.filters.map((filter) => {
                    if (filter.subscription.id === undefined || filter.subscription.displayName === undefined || filter.subscription.subscriptionId === undefined) {
                        throw new errors_1.ArgumentError(filter);
                    }
                    else {
                        const existingNode = existingSubscriptionNodes.find((node) => node.id === filter.subscription.id);
                        if (existingNode) {
                            // Return existing node (which might have many 'cached' nodes underneath it) rather than creating a brand new node every time
                            return existingNode;
                        }
                        else {
                            // filter.subscription.id is the The fully qualified ID of the subscription (For example, /subscriptions/00000000-0000-0000-0000-000000000000) and should be used as the node's id for the purposes of OpenInPortal
                            // filter.subscription.subscriptionId is just the guid and is used in all other cases when creating clients for managing Azure resources
                            return new SubscriptionNode_1.SubscriptionNode(this, this._resourceProvider, filter.subscription.id, filter.session, filter.subscription.displayName, filter.subscription.subscriptionId, this._onNodeCreateEmitter);
                        }
                    }
                });
                nodes = this._subscriptionNodes;
            }
            return nodes.concat(this._customRootNodes);
        });
    }
}
AzureTreeDataProvider.subscriptionContextValue = SubscriptionNode_1.SubscriptionNode.contextValue;
exports.AzureTreeDataProvider = AzureTreeDataProvider;
//# sourceMappingURL=AzureTreeDataProvider.js.map