"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-require-imports
const StorageManagementClient = require("azure-arm-storage");
const vscode_1 = require("vscode");
const createAzureClient_1 = require("../createAzureClient");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AzureWizardExecuteStep_1 = require("./AzureWizardExecuteStep");
class StorageAccountCreateStep extends AzureWizardExecuteStep_1.AzureWizardExecuteStep {
    constructor(defaults) {
        super();
        this._defaults = defaults;
    }
    execute(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.storageAccount) {
                // tslint:disable-next-line:no-non-null-assertion
                const newLocation = wizardContext.location.name;
                // tslint:disable-next-line:no-non-null-assertion
                const newName = wizardContext.newStorageAccountName;
                const newSkuName = `${this._defaults.performance}_${this._defaults.replication}`;
                const creatingStorageAccount = localize_1.localize('CreatingStorageAccount', 'Creating storage account "{0}" in location "{1}" with sku "{2}"...', newName, newLocation, newSkuName);
                yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, title: creatingStorageAccount }, () => __awaiter(this, void 0, void 0, function* () {
                    extensionVariables_1.ext.outputChannel.appendLine(creatingStorageAccount);
                    const storageClient = createAzureClient_1.createAzureClient(wizardContext, StorageManagementClient);
                    wizardContext.storageAccount = yield storageClient.storageAccounts.create(
                    // tslint:disable-next-line:no-non-null-assertion
                    wizardContext.resourceGroup.name, newName, {
                        sku: { name: newSkuName },
                        kind: this._defaults.kind,
                        location: newLocation
                    });
                    const createdStorageAccount = localize_1.localize('CreatedStorageAccount', 'Successfully created storage account "{0}".', newName);
                    vscode_1.window.showInformationMessage(createdStorageAccount);
                    extensionVariables_1.ext.outputChannel.appendLine(createdStorageAccount);
                }));
            }
            return wizardContext;
        });
    }
}
exports.StorageAccountCreateStep = StorageAccountCreateStep;
//# sourceMappingURL=StorageAccountCreateStep.js.map