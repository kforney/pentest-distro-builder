"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_resource_1 = require("azure-arm-resource");
const createAzureClient_1 = require("../createAzureClient");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const uiUtils_1 = require("../utils/uiUtils");
const AzureWizard_1 = require("./AzureWizard");
const AzureWizardPromptStep_1 = require("./AzureWizardPromptStep");
const LocationListStep_1 = require("./LocationListStep");
const ResourceGroupCreateStep_1 = require("./ResourceGroupCreateStep");
const ResourceGroupNameStep_1 = require("./ResourceGroupNameStep");
exports.resourceGroupNamingRules = {
    minLength: 1,
    maxLength: 90,
    invalidCharsRegExp: /[^a-zA-Z0-9\.\_\-\(\)]/
};
class ResourceGroupListStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
    static getResourceGroups(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (wizardContext.resourceGroupsTask === undefined) {
                const client = createAzureClient_1.createAzureClient(wizardContext, azure_arm_resource_1.ResourceManagementClient);
                wizardContext.resourceGroupsTask = uiUtils_1.uiUtils.listAll(client.resourceGroups, client.resourceGroups.list());
            }
            return yield wizardContext.resourceGroupsTask;
        });
    }
    static isNameAvailable(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const resourceGroupsTask = ResourceGroupListStep.getResourceGroups(wizardContext);
            return !(yield resourceGroupsTask).some((rg) => rg.name !== undefined && rg.name.toLowerCase() === name.toLowerCase());
        });
    }
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.resourceGroup && !wizardContext.newResourceGroupName) {
                // Cache resource group separately per subscription
                const options = { placeHolder: 'Select a resource group for new resources.', id: `ResourceGroupListStep/${wizardContext.subscriptionId}` };
                wizardContext.resourceGroup = (yield extensionVariables_1.ext.ui.showQuickPick(this.getQuickPicks(wizardContext), options)).data;
                if (!wizardContext.resourceGroup) {
                    this.subWizard = new AzureWizard_1.AzureWizard([new ResourceGroupNameStep_1.ResourceGroupNameStep(), new LocationListStep_1.LocationListStep()], [new ResourceGroupCreateStep_1.ResourceGroupCreateStep()], wizardContext);
                }
            }
            return wizardContext;
        });
    }
    getQuickPicks(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const picks = [{
                    label: localize_1.localize('NewResourceGroup', '$(plus) Create new resource group'),
                    description: '',
                    data: undefined
                }];
            const resourceGroups = yield ResourceGroupListStep.getResourceGroups(wizardContext);
            return picks.concat(resourceGroups.map((rg) => {
                return {
                    id: rg.id,
                    // tslint:disable-next-line:no-non-null-assertion
                    label: rg.name,
                    description: rg.location,
                    data: rg
                };
            }));
        });
    }
}
exports.ResourceGroupListStep = ResourceGroupListStep;
//# sourceMappingURL=ResourceGroupListStep.js.map