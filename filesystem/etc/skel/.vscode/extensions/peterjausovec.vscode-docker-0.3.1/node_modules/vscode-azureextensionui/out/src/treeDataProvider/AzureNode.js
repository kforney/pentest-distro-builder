"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-require-imports
const opn = require("opn");
const errors_1 = require("../errors");
const localize_1 = require("../localize");
const CreatingTreeItem_1 = require("./CreatingTreeItem");
class AzureNode {
    constructor(parent, treeItem) {
        this.parent = parent;
        this.treeItem = treeItem;
    }
    get _effectiveDescription() {
        return this._temporaryDescription || this.treeItem.description;
    }
    get id() {
        let id = this.treeItem.id || this.treeItem.label;
        if (!id.startsWith('/')) {
            id = `/${id}`;
        }
        // For the sake of backwards compat, only add the parent's id if it's not already there
        if (this.parent && !id.startsWith(this.parent.id)) {
            id = `${this.parent.id}${id}`;
        }
        return id;
    }
    get iconPath() {
        return this._temporaryDescription ? CreatingTreeItem_1.loadingIconPath : this.treeItem.iconPath;
    }
    get label() {
        return this._effectiveDescription ? `${this.treeItem.label} (${this._effectiveDescription})` : this.treeItem.label;
    }
    get tenantId() {
        if (this.parent) {
            return this.parent.tenantId;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    get userId() {
        if (this.parent) {
            return this.parent.userId;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    get subscriptionId() {
        if (this.parent) {
            return this.parent.subscriptionId;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    get subscriptionDisplayName() {
        if (this.parent) {
            return this.parent.subscriptionDisplayName;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    get credentials() {
        if (this.parent) {
            return this.parent.credentials;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    get environment() {
        if (this.parent) {
            return this.parent.environment;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    get treeDataProvider() {
        if (this.parent) {
            return this.parent.treeDataProvider;
        }
        else {
            throw new errors_1.ArgumentError(this);
        }
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.treeItem.refreshLabel) {
                yield this.treeItem.refreshLabel(this);
            }
            yield this.treeDataProvider.refresh(this);
        });
    }
    openInPortal(id, options) {
        id = id === undefined ? this.id : id;
        const queryPrefix = (options && options.queryPrefix) ? `?${options.queryPrefix}` : '';
        const url = `${this.environment.portalUrl}/${queryPrefix}#@${this.tenantId}/resource${id}`;
        // tslint:disable-next-line:no-floating-promises
        opn(url);
    }
    includeInNodePicker(expectedContextValues) {
        return expectedContextValues.some((val) => {
            return this.treeItem.contextValue === val ||
                !this.treeItem.isAncestorOf ||
                this.treeItem.isAncestorOf(val);
        });
    }
    deleteNode() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runWithTemporaryDescription(localize_1.localize('deleting', 'Deleting...'), () => __awaiter(this, void 0, void 0, function* () {
                if (this.treeItem.deleteTreeItem) {
                    yield this.treeItem.deleteTreeItem(this);
                    if (this.parent) {
                        yield this.parent.removeNodeFromCache(this);
                    }
                }
                else {
                    throw new errors_1.NotImplementedError('deleteTreeItem', this.treeItem);
                }
            }));
        });
    }
    runWithTemporaryDescription(description, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this._temporaryDescription = description;
            try {
                yield this.refresh();
                yield callback();
            }
            finally {
                this._temporaryDescription = undefined;
                yield this.refresh();
            }
        });
    }
}
exports.AzureNode = AzureNode;
//# sourceMappingURL=AzureNode.js.map