"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const AzureWizardPromptStep_1 = require("./AzureWizardPromptStep");
class AzureNameStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
    generateRelatedName(wizardContext, name, namingRules) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!util_1.isArray(namingRules)) {
                namingRules = [namingRules];
            }
            let preferredName = namingRules.some((n) => !!n.lowercaseOnly) ? name.toLowerCase() : name;
            for (let invalidCharsRegExp of namingRules.map((n) => n.invalidCharsRegExp)) {
                // Ensure the regExp uses the 'g' flag to replace _all_ invalid characters
                invalidCharsRegExp = new RegExp(invalidCharsRegExp, 'g');
                preferredName = preferredName.replace(invalidCharsRegExp, '');
            }
            const minLength = Math.max(...namingRules.map((n) => n.minLength));
            const maxLength = Math.min(...namingRules.map((n) => n.maxLength));
            const maxTries = 100;
            let count = 1;
            let newName;
            while (count < maxTries) {
                newName = this.generateSuffixedName(preferredName, count, minLength, maxLength);
                if (yield this.isRelatedNameAvailable(wizardContext, newName)) {
                    return newName;
                }
                count += 1;
            }
            return undefined;
        });
    }
    generateSuffixedName(preferredName, i, minLength, maxLength) {
        const suffix = i === 1 ? '' : i.toString();
        const minUnsuffixedLength = minLength - suffix.length;
        const maxUnsuffixedLength = maxLength - suffix.length;
        let unsuffixedName = preferredName;
        if (unsuffixedName.length > maxUnsuffixedLength) {
            unsuffixedName = preferredName.slice(0, maxUnsuffixedLength);
        }
        else {
            while (unsuffixedName.length < minUnsuffixedLength) {
                unsuffixedName += preferredName;
            }
        }
        return unsuffixedName + suffix;
    }
}
exports.AzureNameStep = AzureNameStep;
//# sourceMappingURL=AzureNameStep.js.map