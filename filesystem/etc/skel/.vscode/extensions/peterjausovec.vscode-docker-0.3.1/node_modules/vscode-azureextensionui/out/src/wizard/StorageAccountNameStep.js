"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-require-imports
const StorageManagementClient = require("azure-arm-storage");
const createAzureClient_1 = require("../createAzureClient");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AzureNameStep_1 = require("./AzureNameStep");
const ResourceGroupListStep_1 = require("./ResourceGroupListStep");
const StorageAccountListStep_1 = require("./StorageAccountListStep");
class StorageAccountNameStep extends AzureNameStep_1.AzureNameStep {
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.newStorageAccountName) {
                const client = createAzureClient_1.createAzureClient(wizardContext, StorageManagementClient);
                const suggestedName = wizardContext.relatedNameTask ? yield wizardContext.relatedNameTask : undefined;
                wizardContext.newStorageAccountName = (yield extensionVariables_1.ext.ui.showInputBox({
                    value: suggestedName,
                    prompt: 'Enter the name of the new storage account.',
                    validateInput: (value) => __awaiter(this, void 0, void 0, function* () { return yield this.validateStorageAccountName(client, value); })
                })).trim();
                if (!wizardContext.relatedNameTask) {
                    wizardContext.relatedNameTask = this.generateRelatedName(wizardContext, wizardContext.newStorageAccountName, ResourceGroupListStep_1.resourceGroupNamingRules);
                }
            }
            return wizardContext;
        });
    }
    isRelatedNameAvailable(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield ResourceGroupListStep_1.ResourceGroupListStep.isNameAvailable(wizardContext, name);
        });
    }
    validateStorageAccountName(client, name) {
        return __awaiter(this, void 0, void 0, function* () {
            name = name ? name.trim() : '';
            if (!name || name.length < StorageAccountListStep_1.storageAccountNamingRules.minLength || name.length > StorageAccountListStep_1.storageAccountNamingRules.maxLength) {
                return localize_1.localize('invalidLength', 'The name must be between {0} and {1} characters.', StorageAccountListStep_1.storageAccountNamingRules.minLength, StorageAccountListStep_1.storageAccountNamingRules.maxLength);
            }
            else if (name.match(StorageAccountListStep_1.storageAccountNamingRules.invalidCharsRegExp) !== null) {
                return localize_1.localize('invalidChars', "The name can only contain lowercase letters and numbers.");
            }
            else {
                const nameAvailabilityResult = yield client.storageAccounts.checkNameAvailability(name);
                if (!nameAvailabilityResult.nameAvailable) {
                    return nameAvailabilityResult.message;
                }
                else {
                    return undefined;
                }
            }
        });
    }
}
exports.StorageAccountNameStep = StorageAccountNameStep;
//# sourceMappingURL=StorageAccountNameStep.js.map