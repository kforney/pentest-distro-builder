"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const vscode_1 = require("vscode");
const DialogResponses_1 = require("./DialogResponses");
const extensionVariables_1 = require("./extensionVariables");
const localize_1 = require("./localize");
const parseError_1 = require("./parseError");
const reportAnIssue_1 = require("./reportAnIssue");
// tslint:disable-next-line:no-any
function callWithTelemetryAndErrorHandling(callbackId, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        assert(extensionVariables_1.extInitialized, 'registerUIExtensionVariables must be called first');
        const start = Date.now();
        const context = {
            properties: {
                isActivationEvent: 'false',
                cancelStep: '',
                result: 'Succeeded',
                error: '',
                errorMessage: ''
            },
            measurements: {
                duration: 0
            },
            suppressTelemetry: false,
            suppressErrorDisplay: false,
            rethrowError: false
        };
        try {
            return yield Promise.resolve(callback.call(context));
        }
        catch (error) {
            const errorData = parseError_1.parseError(error);
            if (errorData.isUserCancelledError) {
                context.properties.result = 'Canceled';
                context.suppressErrorDisplay = true;
                context.rethrowError = false;
            }
            else {
                context.properties.result = 'Failed';
                context.properties.error = errorData.errorType;
                context.properties.errorMessage = errorData.message;
            }
            if (!context.suppressErrorDisplay) {
                // Always append the error to the output channel, but only 'show' the output channel for multiline errors
                extensionVariables_1.ext.outputChannel.appendLine(localize_1.localize('outputError', 'Error: {0}', errorData.message));
                let message;
                if (errorData.message.includes('\n')) {
                    extensionVariables_1.ext.outputChannel.show();
                    message = localize_1.localize('multilineError', 'An error has occured. Check output window for more details.');
                }
                else {
                    message = errorData.message;
                }
                // don't wait
                vscode_1.window.showErrorMessage(message, DialogResponses_1.DialogResponses.reportAnIssue).then((result) => {
                    if (result === DialogResponses_1.DialogResponses.reportAnIssue) {
                        reportAnIssue_1.reportAnIssue(callbackId, errorData);
                    }
                });
            }
            if (context.rethrowError) {
                throw error;
            }
        }
        finally {
            if (extensionVariables_1.ext.reporter) {
                // For suppressTelemetry=true, ignore successful results
                if (!(context.suppressTelemetry && context.properties.result === 'Succeeded')) {
                    const end = Date.now();
                    context.measurements.duration = (end - start) / 1000;
                    // Note: The id of the extension is automatically prepended to the given callbackId (e.g. "vscode-cosmosdb/")
                    extensionVariables_1.ext.reporter.sendTelemetryEvent(callbackId, context.properties, context.measurements);
                }
            }
        }
    });
}
exports.callWithTelemetryAndErrorHandling = callWithTelemetryAndErrorHandling;
//# sourceMappingURL=callWithTelemetryAndErrorHandling.js.map