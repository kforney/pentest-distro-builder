"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_resource_1 = require("azure-arm-resource");
const createAzureClient_1 = require("../createAzureClient");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AzureWizardPromptStep_1 = require("./AzureWizardPromptStep");
class LocationListStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
    static setLocation(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const locations = yield LocationListStep.getLocations(wizardContext);
            wizardContext.location = locations.find((l) => name === l.name || name === l.displayName);
        });
    }
    static getLocations(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (wizardContext.locationsTask === undefined) {
                const client = createAzureClient_1.createAzureSubscriptionClient(wizardContext, azure_arm_resource_1.SubscriptionClient);
                wizardContext.locationsTask = client.subscriptions.listLocations(wizardContext.subscriptionId);
            }
            return yield wizardContext.locationsTask;
        });
    }
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.location) {
                const options = { placeHolder: localize_1.localize('selectLocation', 'Select a location for new resources.') };
                wizardContext.location = (yield extensionVariables_1.ext.ui.showQuickPick(this.getQuickPicks(wizardContext), options)).data;
            }
            return wizardContext;
        });
    }
    getQuickPicks(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const locations = yield LocationListStep.getLocations(wizardContext);
            return locations.map((l) => {
                return {
                    // tslint:disable-next-line:no-non-null-assertion
                    label: l.displayName,
                    description: '',
                    data: l
                };
            });
        });
    }
}
exports.LocationListStep = LocationListStep;
//# sourceMappingURL=LocationListStep.js.map