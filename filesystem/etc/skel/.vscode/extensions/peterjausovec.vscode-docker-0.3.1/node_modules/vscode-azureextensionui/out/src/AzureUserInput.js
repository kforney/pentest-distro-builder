"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
const DialogResponses_1 = require("./DialogResponses");
const errors_1 = require("./errors");
const localize_1 = require("./localize");
const randomUtils_1 = require("./utils/randomUtils");
class AzureUserInput {
    constructor(persistence) {
        this._persistence = persistence;
    }
    showQuickPick(items, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.ignoreFocusOut === undefined) {
                options.ignoreFocusOut = true;
            }
            let persistenceKey;
            const unhashedKey = options.id || options.placeHolder;
            if (unhashedKey && !options.canPickMany) {
                persistenceKey = `showQuickPick.${randomUtils_1.randomUtils.getPseudononymousStringHash(unhashedKey)}`;
            }
            const result = yield vscode.window.showQuickPick(this.getOrderedItems(items, persistenceKey, options.suppressPersistence), options);
            if (result === undefined) {
                throw new errors_1.UserCancelledError();
            }
            if (!Array.isArray(result) && persistenceKey && !result.suppressPersistence) {
                this._persistence.update(persistenceKey, getPersistenceValue(result));
            }
            return result;
        });
    }
    showInputBox(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.ignoreFocusOut === undefined) {
                options.ignoreFocusOut = true;
            }
            const result = yield vscode.window.showInputBox(options);
            if (result === undefined) {
                throw new errors_1.UserCancelledError();
            }
            else {
                return result;
            }
        });
    }
    // tslint:disable-next-line:no-any
    showWarningMessage(message, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line:no-unsafe-any
            const result = yield vscode.window.showWarningMessage(message, ...args);
            if (result === undefined || result === DialogResponses_1.DialogResponses.cancel) {
                throw new errors_1.UserCancelledError();
            }
            else {
                return result;
            }
        });
    }
    showOpenDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield vscode.window.showOpenDialog(options);
            if (result === undefined) {
                throw new errors_1.UserCancelledError();
            }
            else {
                return result;
            }
        });
    }
    /**
     * See if the previous value selected by the user is in the list, and move it to the top as default
     */
    getOrderedItems(items, persistenceKey, suppressPersistence) {
        return __awaiter(this, void 0, void 0, function* () {
            items = yield Promise.resolve(items);
            if (persistenceKey && !suppressPersistence) {
                const previousValue = this._persistence.get(persistenceKey);
                if (previousValue) {
                    const index = items.findIndex((item) => getPersistenceValue(item) === previousValue);
                    if (index !== -1) {
                        const previousItem = items.splice(index, 1)[0];
                        const recentlyUsed = localize_1.localize('recentlyUsed', '(recently used)');
                        if (!previousItem.description) {
                            previousItem.description = recentlyUsed;
                        }
                        else if (!previousItem.detail) {
                            previousItem.detail = recentlyUsed;
                        }
                        else {
                            previousItem.description = `${previousItem.description} ${recentlyUsed}`;
                        }
                        items.unshift(previousItem);
                    }
                }
            }
            return items;
        });
    }
}
exports.AzureUserInput = AzureUserInput;
function getPersistenceValue(item) {
    return randomUtils_1.randomUtils.getPseudononymousStringHash(item.id || item.label);
}
//# sourceMappingURL=AzureUserInput.js.map