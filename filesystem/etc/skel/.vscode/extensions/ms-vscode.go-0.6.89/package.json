{
	"name": "Go",
	"version": "0.6.89",
	"publisher": "ms-vscode",
	"description": "Rich Go language support for Visual Studio Code",
	"author": {
		"name": "Microsoft Corporation - Development Labs"
	},
	"icon": "images/goIcon.png",
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters",
		"Debuggers",
		"Formatters"
	],
	"galleryBanner": {
		"color": "#CFB69A",
		"theme": "light"
	},
	"private": true,
	"repository": {
		"type": "git",
		"url": "https://github.com/Microsoft/vscode-go.git"
	},
	"keywords": [
		"multi-root ready"
	],
	"scripts": {
		"vscode:prepublish": "tsc -p ./",
		"compile": "tsc -watch -p ./",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"test": "node ./node_modules/vscode/bin/test",
		"lint": "node ./node_modules/tslint/bin/tslint ./src/*.ts ./src/debugAdapter/*.ts ./test/*.ts"
	},
	"extensionDependencies": [],
	"dependencies": {
		"console-stamp": "^0.2.2",
		"diff": "~3.3.0",
		"json-rpc2": "^1.0.2",
		"vscode-debug-logger": "^0.0.4",
		"vscode-debugadapter": "^1.30.0",
		"vscode-debugprotocol": "^1.11.0",
		"vscode-extension-telemetry": "^0.0.15",
		"vscode-languageclient": "~4.3.0"
	},
	"devDependencies": {
		"@types/fs-extra": "0.0.35",
		"@types/mocha": "^2.2.33",
		"@types/node": "^6.0.50",
		"fs-extra": "^1.0.0",
		"tslint": "^4.0.2",
		"typescript": "^2.1.5",
		"vscode": "^1.1.4"
	},
	"engines": {
		"vscode": "^1.22.0"
	},
	"activationEvents": [
		"onLanguage:go",
		"onCommand:go.gopath",
		"onCommand:go.tools.install",
		"onDebugResolve:go"
	],
	"main": "./out/src/goMain",
	"contributes": {
		"languages": [
			{
				"id": "go",
				"extensions": [
					".go"
				],
				"aliases": [
					"Go"
				]
			}
		],
		"snippets": [
			{
				"language": "go",
				"path": "./snippets/go.json"
			}
		],
		"configurationDefaults": {
			"[go]": {
				"editor.insertSpaces": false,
				"editor.formatOnSave": true
			}
		},
		"commands": [
			{
				"command": "go.gopath",
				"title": "Go: Current GOPATH",
				"description": "See the currently set GOPATH."
			},
			{
				"command": "go.test.cursor",
				"title": "Go: Test Function At Cursor",
				"description": "Runs a unit test at the cursor."
			},
			{
				"command": "go.benchmark.cursor",
				"title": "Go: Benchmark Function At Cursor",
				"description": "Runs a benchmark at the cursor."
			},
			{
				"command": "go.test.file",
				"title": "Go: Test File",
				"description": "Runs all unit tests in the current file."
			},
			{
				"command": "go.test.package",
				"title": "Go: Test Package",
				"description": "Runs all unit tests in the package of the current file."
			},
			{
				"command": "go.test.workspace",
				"title": "Go: Test All Packages In Workspace",
				"description": "Runs all unit tests from all packages in the current workspace."
			},
			{
				"command": "go.test.previous",
				"title": "Go: Test Previous",
				"description": "Re-runs the last executed test."
			},
			{
				"command": "go.test.coverage",
				"title": "Go: Toggle Test Coverage In Current Package",
				"description": "Displays test coverage in the current package."
			},
			{
				"command": "go.test.generate.package",
				"title": "Go: Generate Unit Tests For Package",
				"description": "Generates unit tests for the current package"
			},
			{
				"command": "go.test.generate.file",
				"title": "Go: Generate Unit Tests For File",
				"description": "Generates unit tests for the current file"
			},
			{
				"command": "go.test.generate.function",
				"title": "Go: Generate Unit Tests For Function",
				"description": "Generates unit tests for the selected function in the current file"
			},
			{
				"command": "go.impl.cursor",
				"title": "Go: Generate Interface Stubs",
				"description": "Generates method stub for implementing the provided interface and inserts at the cursor."
			},
			{
				"command": "go.import.add",
				"title": "Go: Add Import",
				"description": "Add an import declaration"
			},
			{
				"command": "go.add.package.workspace",
				"title": "Go: Add Package to Workspace",
				"description": "Add a package from the imports list to the workspace."
			},
			{
				"command": "go.tools.install",
				"title": "Go: Install/Update Tools",
				"description": "install/update the required go packages"
			},
			{
				"command": "go.toggle.test.file",
				"title": "Go: Toggle Test File",
				"description": "Toggles between file in current active editor and the corresponding test file."
			},
			{
				"command": "go.add.tags",
				"title": "Go: Add Tags To Struct Fields",
				"description": "Add tags configured in go.addTags setting to selected struct using gomodifytags"
			},
			{
				"command": "go.remove.tags",
				"title": "Go: Remove Tags From Struct Fields",
				"description": "Remove tags configured in go.removeTags setting from selected struct using gomodifytags"
			},
			{
				"command": "go.fill.struct",
				"title": "Go: Fill struct",
				"description": "Fill a struct literal with default values"
			},
			{
				"command": "go.show.commands",
				"title": "Go: Show All Commands...",
				"description": "Shows all commands from the Go extension in the quick pick"
			},
			{
				"command": "go.browse.packages",
				"title": "Go: Browse Packages",
				"description": "Browse packages and Go files inside the packages."
			},
			{
				"command": "go.get.package",
				"title": "Go: Get Package",
				"description": "Run `go get -v` on the package on the current line."
			},
			{
				"command": "go.playground",
				"title": "Go: Run on Go Playground",
				"description": "Upload the current selection or file to the Go Playground"
			},
			{
				"command": "go.lint.package",
				"title": "Go: Lint Current Package",
				"description": "Run linter in the package of the current file."
			},
			{
				"command": "go.lint.workspace",
				"title": "Go: Lint Workspace",
				"description": "Run linter in the current workspace."
			},
			{
				"command": "go.vet.package",
				"title": "Go: Vet Current Package",
				"description": "Run go vet in the package of the current file."
			},
			{
				"command": "go.vet.workspace",
				"title": "Go: Vet Workspace",
				"description": "Run go vet in the current workspace."
			},
			{
				"command": "go.build.package",
				"title": "Go: Build Current Package",
				"description": "Build the package of the current file."
			},
			{
				"command": "go.build.workspace",
				"title": "Go: Build Workspace",
				"description": "Build the current workspace."
			},
			{
				"command": "go.install.package",
				"title": "Go: Install Current Package",
				"description": "Install the current package."
			},
			{
				"command": "go.test.cancel",
				"title": "Go: Cancel Running Tests",
				"description": "Cancels running tests."
			}
		],
		"debuggers": [
			{
				"type": "go",
				"label": "Go",
				"enableBreakpointsFor": {
					"languageIds": [
						"go"
					]
				},
				"program": "./out/src/debugAdapter/goDebug.js",
				"runtime": "node",
				"languages": [
					"go"
				],
				"configurationSnippets": [
					{
						"label": "Go: Launch package",
						"description": "Debug the package in the program attribute",
						"body": {
							"name": "${2:Launch Package}",
							"type": "go",
							"request": "launch",
							"mode": "debug",
							"program": "^\"\\${workspaceRoot}${1:}\""
						}
					},
					{
						"label": "Go: Launch file",
						"description": "Debug the file in the program attribute",
						"body": {
							"name": "${2:Launch file}",
							"type": "go",
							"request": "launch",
							"mode": "debug",
							"program": "^\"${1:\\${file}}\""
						}
					},
					{
						"label": "Go: Launch test package",
						"description": "Debug the test package in the program attribute",
						"body": {
							"name": "${2:Launch test package}",
							"type": "go",
							"request": "launch",
							"mode": "test",
							"program": "^\"\\${workspaceRoot}${1:}\""
						}
					},
					{
						"label": "Go: Launch test function",
						"description": "Debug the test function in the args, ensure program attributes points to right package",
						"body": {
							"name": "${3:Launch test function}",
							"type": "go",
							"request": "launch",
							"mode": "test",
							"program": "^\"\\${workspaceRoot}${1:}\"",
							"args": [
								"-test.run",
								"${2:MyTestFunction}"
							]
						}
					},
					{
						"label": "Go: Connect to server",
						"description": "Connect to a remote headless debug server",
						"body": {
							"name": "${3:Connect to server}",
							"type": "go",
							"request": "launch",
							"mode": "remote",
							"remotePath": "^\"\\${workspaceRoot}${1:}\"",
							"port": 2345,
							"host": "127.0.0.1",
							"program": "^\"\\${workspaceRoot}${1:}\"",
							"env": {},
							"args": []
						}
					}
				],
				"configurationAttributes": {
					"launch": {
						"required": [],
						"properties": {
							"program": {
								"type": "string",
								"description": "Path to the program folder (or any file within that folder) when in 'debug' or 'test' mode, and to the pre-built binary file to debug in 'exec' mode.",
								"default": "${workspaceRoot}"
							},
							"mode": {
								"enum": [
									"auto",
									"debug",
									"remote",
									"test",
									"exec"
								],
								"description": "One of 'auto', 'debug', 'remote', 'test', 'exec'.",
								"default": "auto"
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Automatically stop program after launch.",
								"default": false
							},
							"args": {
								"type": "array",
								"description": "Command line arguments passed to the program.",
								"items": {
									"type": "string"
								},
								"default": []
							},
							"showLog": {
								"type": "boolean",
								"description": "Show log output from the delve debugger.",
								"default": false
							},
							"cwd": {
								"type": "string",
								"description": "Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.",
								"default": "."
							},
							"env": {
								"type": "object",
								"description": "Environment variables passed to the program.",
								"default": {}
							},
							"buildFlags": {
								"type": "string",
								"description": "Build flags, to be passed to the Go compiler.",
								"default": ""
							},
							"init": {
								"type": "string",
								"description": "Init file, executed by the terminal client.",
								"default": ""
							},
							"remotePath": {
								"type": "string",
								"description": "If remote debugging, the path to the source code on the remote machine, if different from the local machine.",
								"default": ""
							},
							"port": {
								"type": "number",
								"description": "The port that the delve debugger will be listening on.",
								"default": 2345
							},
							"host": {
								"type": "string",
								"description": "The host name of the machine the delve debugger will be listening on.",
								"default": "127.0.0.1"
							},
							"trace": {
								"type": [
									"boolean",
									"string"
								],
								"enum": [
									"verbose",
									true
								],
								"default": true,
								"description": "When 'true', the extension will log diagnostic info to a file. When 'verbose', it will also show logs in the console."
							},
							"envFile": {
								"type": "string",
								"description": "Absolute path to a file containing environment variable definitions.",
								"default": "${workspaceRoot}/.env"
							},
							"backend": {
								"type": "string",
								"enum": [
									"default",
									"native",
									"lldb"
								],
								"description": "Backend used by delve. Only available in delve version 0.12.2 and above."
							},
							"output": {
								"type": "string",
								"description": "Output path for the binary of delve",
								"default": "debug"
							},
							"logOutput": {
								"type": "string",
								"enum": [
									"debugger",
									"gdbwire",
									"lldbout",
									"debuglineerr",
									"rpc"
								],
								"description": "Comma separated list of components that should produce debug output.",
								"default": "debugger"
							},
							"dlvLoadConfig": {
								"type": "object",
								"properties": {
									"followPointers": {
										"type": "boolean",
										"description": "FollowPointers requests pointers to be automatically dereferenced",
										"default": true
									},
									"maxVariableRecurse": {
										"type": "number",
										"description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
										"default": 1
									},
									"maxStringLen": {
										"type": "number",
										"description": "MaxStringLen is the maximum number of bytes read from a string",
										"default": 64
									},
									"maxArrayValues": {
										"type": "number",
										"description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
										"default": 64
									},
									"maxStructFields": {
										"type": "number",
										"description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
										"default": -1
									}
								},
								"description": "LoadConfig describes to delve, how to load values from target's memory",
								"default": {
									"followPointers": true,
									"maxVariableRecurse": 1,
									"maxStringLen": 64,
									"maxArrayValues": 64,
									"maxStructFields": -1
								}
							},
							"useApiV1": {
								"type": "boolean",
								"description": "If true, the v1 of delve apis will be used, else v2 will be used",
								"default": true
							}
						}
					}
				}
			}
		],
		"configuration": {
			"type": "object",
			"title": "Go configuration",
			"properties": {
				"go.buildOnSave": {
					"type": "string",
					"enum": [
						"package",
						"workspace",
						"off"
					],
					"default": "package",
					"description": "Compiles code on file save using 'go build -i' or 'go test -c -i'. Options are 'workspace', 'package or 'off'.",
					"scope": "resource"
				},
				"go.buildFlags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ['-ldflags=\"-s\"'])",
					"scope": "resource"
				},
				"go.buildTags": {
					"type": "string",
					"default": "",
					"description": "The Go build tags to use for all commands that support a `-tags '...'` argument",
					"scope": "resource"
				},
				"go.installDependenciesWhenBuilding": {
					"type": "boolean",
					"default": true,
					"description": "If true, then `-i` flag will be passed to `go build` everytime the code is compiled.",
					"scope": "resource"
				},
				"go.lintOnSave": {
					"type": "string",
					"enum": [
						"package",
						"workspace",
						"off"
					],
					"default": "package",
					"description": "Lints code on file save using the configured Lint tool. Options are 'workspace', 'package' or 'off'.",
					"scope": "resource"
				},
				"go.lintTool": {
					"type": "string",
					"default": "golint",
					"description": "Specifies Lint tool name.",
					"scope": "resource",
					"enum": [
						"golint",
						"gometalinter",
						"megacheck",
						"golangci-lint",
						"revive"
					]
				},
				"go.lintFlags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Flags to pass to Lint tool (e.g. [\"-min_confidence=.8\"])",
					"scope": "resource"
				},
				"go.vetOnSave": {
					"type": "string",
					"enum": [
						"package",
						"workspace",
						"off"
					],
					"default": "package",
					"description": "Vets code on file save using 'go tool vet'. Options are 'workspace', 'package or 'off'.",
					"scope": "resource"
				},
				"go.vetFlags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Flags to pass to `go tool vet` (e.g. ['-all', '-shadow'])",
					"scope": "resource"
				},
				"go.formatTool": {
					"type": "string",
					"default": "goreturns",
					"description": "Pick 'gofmt', 'goimports', 'goreturns' or 'goformat' to run on format.",
					"scope": "resource",
					"enum": [
						"gofmt",
						"goimports",
						"goreturns",
						"goformat"
					]
				},
				"go.formatFlags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Flags to pass to format tool (e.g. ['-s'])",
					"scope": "resource"
				},
				"go.inferGopath": {
					"type": "boolean",
					"default": false,
					"description": "Infer GOPATH from the workspace root.",
					"scope": "resource"
				},
				"go.gopath": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.",
					"scope": "resource"
				},
				"go.toolsGopath": {
					"type": "string",
					"default": "",
					"description": "Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.",
					"scope": "resource"
				},
				"go.goroot": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "Specifies the GOROOT to use when no environment variable is set.",
					"scope": "resource"
				},
				"go.testOnSave": {
					"type": "boolean",
					"default": false,
					"description": "Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.",
					"scope": "resource"
				},
				"go.coverOnSave": {
					"type": "boolean",
					"default": false,
					"description": "If true, runs 'go test -coverprofile' on save and shows test coverage.",
					"scope": "resource"
				},
				"go.coverOnTestPackage": {
					"type": "boolean",
					"default": true,
					"description": "If true, shows test coverage when Go: Test Package command is run."
				},
				"go.coverOnSingleTest": {
					"type": "boolean",
					"default": false,
					"description": "If true, shows test coverage when Go: Test Function at cursor command is run."
				},
				"go.coverageOptions": {
					"type": "string",
					"enum": [
						"showCoveredCodeOnly",
						"showUncoveredCodeOnly",
						"showBothCoveredAndUncoveredCode"
					],
					"default": "showBothCoveredAndUncoveredCode",
					"description": "Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage",
					"scope": "resource"
				},
				"go.coverageDecorator": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string",
							"default": "highlight",
							"enum": [
								"highlight",
								"gutter"
							]
						},
						"coveredHighlightColor": {
							"type": "string",
							"default": "rgba(64,128,128,0.5)",
							"description": "Color in the rgba format to use to highlight covered code."
						},
						"uncoveredHighlightColor": {
							"type": "string",
							"default": "rgba(128,64,64,0.25)",
							"description": "Color in the rgba format to use to highlight uncovered code."
						},
						"coveredGutterStyle": {
							"type": "string",
							"default": "blockblue",
							"enum": [
								"blockblue",
								"blockred",
								"blockgreen",
								"blockyellow",
								"slashred",
								"slashgreen",
								"slashblue",
								"slashyellow",
								"verticalred",
								"verticalgreen",
								"verticalblue",
								"verticalyellow"
							],
							"description": "Gutter style to indicate covered code."
						},
						"uncoveredGutterStyle": {
							"type": "string",
							"default": "blockblue",
							"enum": [
								"blockblue",
								"blockred",
								"blockgreen",
								"blockyellow",
								"slashred",
								"slashgreen",
								"slashblue",
								"slashyellow",
								"verticalred",
								"verticalgreen",
								"verticalblue",
								"verticalyellow"
							],
							"description": "Gutter style to indicate covered code."
						}
					},
					"default": {
						"type": "highlight",
						"coveredHighlightColor": "rgba(64,128,128,0.5)",
						"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
						"coveredGutterStyle": "blockblue",
						"uncoveredGutterStyle": "slashyellow"
					},
					"description": "This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the color for the former and the style for the latter.",
					"scope": "resource"
				},
				"go.testTimeout": {
					"type": "string",
					"default": "30s",
					"description": "Specifies the timeout for go test in ParseDuration format.",
					"scope": "resource"
				},
				"go.testEnvVars": {
					"type": "object",
					"default": {},
					"description": "Environment variables that will passed to the process that runs the Go tests",
					"scope": "resource"
				},
				"go.testEnvFile": {
					"type": "string",
					"default": null,
					"description": "Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.",
					"scope": "resource"
				},
				"go.testFlags": {
					"type": [
						"array",
						"null"
					],
					"items": {
						"type": "string"
					},
					"default": null,
					"description": "Flags to pass to `go test`. If null, then buildFlags will be used.",
					"scope": "resource"
				},
				"go.toolsEnvVars": {
					"type": "object",
					"default": {},
					"description": "Environment variables that will passed to the processes that run the Go tools (e.g. CGO_CFLAGS)",
					"scope": "resource"
				},
				"go.gocodeAutoBuild": {
					"type": "boolean",
					"default": false,
					"description": "Enable gocode's autobuild feature",
					"scope": "resource"
				},
				"go.gocodePackageLookupMode": {
					"type": "string",
					"enum": [
						"go",
						"gb"
					],
					"default": "go",
					"description": "If go, use standard Go package lookup rules for completions. If gb, use gb-specific lookup rules for completions",
					"scope": "resource"
				},
				"go.useCodeSnippetsOnFunctionSuggest": {
					"type": "boolean",
					"default": false,
					"description": "Complete functions with their parameter signature, including the variable types",
					"scope": "resource"
				},
				"go.useCodeSnippetsOnFunctionSuggestWithoutType": {
					"type": "boolean",
					"default": false,
					"description": "Complete functions with their parameter signature, excluding the variable types",
					"scope": "resource"
				},
				"go.autocompleteUnimportedPackages": {
					"type": "boolean",
					"default": false,
					"description": "Include unimported packages in auto-complete suggestions.",
					"scope": "resource"
				},
				"go.docsTool": {
					"type": "string",
					"default": "godoc",
					"description": "Pick 'godoc' or 'gogetdoc' to get documentation. In Go 1.5, godoc is used regardless of the choice here.",
					"scope": "resource",
					"enum": [
						"godoc",
						"gogetdoc",
						"guru"
					]
				},
				"go.useLanguageServer": {
					"type": "boolean",
					"default": false,
					"description": "Experimental: Not available in Windows. Use Go language server from Sourcegraph for Hover, Definition, Find All References, Signature Help, File Outline and Workspace Symbol features instead of tools like guru, godef, go-outline and go-symbol"
				},
				"go.languageServerFlags": {
					"type": "array",
					"default": [],
					"description": "Flags like -trace and -logfile to be used while running the language server."
				},
				"go.languageServerExperimentalFeatures": {
					"type": "object",
					"properties": {
						"format": {
							"type": "boolean",
							"default": false,
							"description": "If true, gofmt is used by the language server to format files."
						},
						"autoComplete": {
							"type": "boolean",
							"default": false,
							"description": "If true, the language server will provide code completion results."
						}
					},
					"default": {
						"format": false,
						"autoComplete": false
					},
					"description": "Use this setting to enable/disable experimental features from the language server."
				},
				"go.gotoSymbol.includeImports": {
					"type": "boolean",
					"default": false,
					"description": "If false, the import statements will be excluded while using the Go to Symbol in File feature",
					"scope": "resource"
				},
				"go.gotoSymbol.includeGoroot": {
					"type": "boolean",
					"default": false,
					"description": "If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature",
					"scope": "resource"
				},
				"go.enableCodeLens": {
					"type": "object",
					"properties": {
						"references": {
							"type": "boolean",
							"default": false,
							"description": "If true, enables the references code lens. Uses guru. Recalculates when there is change to the document followed by scrolling."
						},
						"runtest": {
							"type": "boolean",
							"default": true,
							"description": "If true, enables code lens for running and debugging tests"
						}
					},
					"default": {
						"references": false,
						"runtest": true
					},
					"description": "Feature level setting to enable/disable code lens for references and run/debug tests",
					"scope": "resource"
				},
				"go.addTags": {
					"type": "object",
					"properties": {
						"promptForTags": {
							"type": "boolean",
							"default": false,
							"description": "If true, Go: Add Tags command will prompt the user to provide tags and options instead of using the configured values"
						},
						"tags": {
							"type": "string",
							"default": "json",
							"description": "Comma separated tags to be used by Go: Add Tags command"
						},
						"options": {
							"type": "string",
							"default": "json=omitempty",
							"description": "Comma separated tag=options pairs to be used by Go: Add Tags command"
						},
						"transform": {
							"type": "string",
							"enum": [
								"snakecase",
								"camelcase"
							],
							"default": "snakecase",
							"description": "Transformation rule used by Go: Add Tags command to add tags"
						}
					},
					"default": {
						"tags": "json",
						"options": "json=omitempty",
						"promptForTags": false,
						"transform": "snakecase"
					},
					"description": "Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.",
					"scope": "resource"
				},
				"go.liveErrors": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean",
							"default": false,
							"description": "If true, runs gotype on the file currently being edited and reports any semantic or syntactic errors found."
						},
						"delay": {
							"type": "number",
							"default": 500,
							"description": "The number of milliseconds to delay before execution. Resets with each keystroke."
						}
					},
					"default": {
						"enabled": false,
						"delay": 500
					},
					"description": "Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay.",
					"scope": "resource"
				},
				"go.removeTags": {
					"type": "object",
					"properties": {
						"promptForTags": {
							"type": "boolean",
							"default": false,
							"description": "If true, Go: Remove Tags command will prompt the user to provide tags and options instead of using the configured values"
						},
						"tags": {
							"type": "string",
							"default": "json",
							"description": "Comma separated tags to be used by Go: Remove Tags command"
						},
						"options": {
							"type": "string",
							"default": "json=omitempty",
							"description": "Comma separated tag=options pairs to be used by Go: Remove Tags command"
						}
					},
					"default": {
						"tags": "",
						"options": "",
						"promptForTags": false
					},
					"description": "Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.",
					"scope": "resource"
				},
				"go.playground": {
					"type": "object",
					"properties": {
						"openbrowser": {
							"type": "boolean",
							"default": true,
							"description": "Whether to open the created Go Playground in the default browser"
						},
						"share": {
							"type": "boolean",
							"default": true,
							"description": "Whether to make the created Go Playground shareable"
						},
						"run": {
							"type": "boolean",
							"default": true,
							"description": "Whether to run the created Go Playground after creation"
						},
						"description": "The flags configured here will be passed through to command `goplay`"
					},
					"default": {
						"openbrowser": true,
						"share": true,
						"run": true
					}
				},
				"go.editorContextMenuCommands": {
					"type": "object",
					"properties": {
						"toggleTestFile": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to toggle between a Go file and its test file to the editor context menu"
						},
						"addTags": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to add configured tags from struct fields to the editor context menu"
						},
						"removeTags": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to remove configured tags from struct fields to the editor context menu"
						},
						"fillStruct": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to fill struct literal with default values to the editor context menu"
						},
						"testAtCursor": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to run the test under the cursor to the editor context menu"
						},
						"testFile": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to run all tests in the current file to the editor context menu"
						},
						"testPackage": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to run all tests in the current package to the editor context menu"
						},
						"generateTestForFunction": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to generate unit tests for function under the cursor to the editor context menu"
						},
						"generateTestForFile": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to generate unit tests for current file to the editor context menu"
						},
						"generateTestForPackage": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to generate unit tests for currnt package to the editor context menu"
						},
						"addImport": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to import a package to the editor context menu"
						},
						"testCoverage": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to run test coverage to the editor context menu"
						},
						"playground": {
							"type": "boolean",
							"default": true,
							"description": "If true, adds command to upload the current file or selection to the Go Playground"
						}
					},
					"default": {
						"toggleTestFile": true,
						"addTags": true,
						"removeTags": false,
						"testAtCursor": true,
						"testFile": false,
						"testPackage": false,
						"generateTestForFunction": true,
						"generateTestForFile": false,
						"generateTestForPackage": false,
						"addImport": true,
						"testCoverage": true,
						"playground": true
					},
					"description": "Experimental Feature: Enable/Disable entries from the context menu in the editor.",
					"scope": "resource"
				},
				"go.gotoSymbol.ignoreFolders": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Folder names (not paths) to ignore while using Go to Symbol in Workspace feature",
					"scope": "resource"
				},
				"go.delveConfig": {
					"type": "object",
					"properties": {
						"dlvLoadConfig": {
							"type": "object",
							"properties": {
								"followPointers": {
									"type": "boolean",
									"description": "FollowPointers requests pointers to be automatically dereferenced",
									"default": true
								},
								"maxVariableRecurse": {
									"type": "number",
									"description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
									"default": 1
								},
								"maxStringLen": {
									"type": "number",
									"description": "MaxStringLen is the maximum number of bytes read from a string",
									"default": 64
								},
								"maxArrayValues": {
									"type": "number",
									"description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
									"default": 64
								},
								"maxStructFields": {
									"type": "number",
									"description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
									"default": -1
								}
							},
							"description": "LoadConfig describes to delve, how to load values from target's memory",
							"default": {
								"followPointers": true,
								"maxVariableRecurse": 1,
								"maxStringLen": 64,
								"maxArrayValues": 64,
								"maxStructFields": -1
							}
						},
						"useApiV1": {
							"type": "boolean",
							"description": "If true, the v1 of delve apis will be used, else v2 will be used",
							"default": true
						}
					},
					"scope": "resource"
				},
				"go.alternateTools": {
					"type": "object",
					"default": {},
					"description": "Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in.",
					"scope": "resource",
					"properties": {
						"go": {
							"type": "string",
							"default": "go",
							"description": "Alternate tool to use instead of the go binary or alternate path to use for the go binary."
						},
						"gometalinter": {
							"type": "string",
							"default": "gometalinter",
							"description": "Alternate tool to use instead of the gometalinter binary or alternate path to use for the gometalinter binary."
						},
						"gocode": {
							"type": "string",
							"default": "gocode",
							"description": "Alternate tool to use instead of the gocode binary or alternate path to use for the gocode binary."
						},
						"gopkgs": {
							"type": "string",
							"default": "gopkgs",
							"description": "Alternate tool to use instead of the gopkgs binary or alternate path to use for the gopkgs binary."
						},
						"godoc": {
							"type": "string",
							"default": "godoc",
							"description": "Alternate tool to use instead of the godoc binary or alternate path to use for the godoc binary."
						},
						"go-outline": {
							"type": "string",
							"default": "go-outline",
							"description": "Alternate tool to use instead of the go-outline binary or alternate path to use for the go-outline binary."
						},
						"guru": {
							"type": "string",
							"default": "guru",
							"description": "Alternate tool to use instead of the guru binary or alternate path to use for the guru binary."
						}
					}
				}
			}
		},
		"menus": {
			"editor/context": [
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.toggleTestFile && resourceLangId == go",
					"command": "go.toggle.test.file",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.addTags && resourceLangId == go",
					"command": "go.add.tags",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.removeTags && resourceLangId == go",
					"command": "go.remove.tags",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.fillStruct && resourceLangId == go",
					"command": "go.fill.struct",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testAtCursor && resourceLangId == go && !config.editor.codeLens",
					"command": "go.test.cursor",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.benchmarkAtCursor && resourceLangId == go && !config.editor.codeLens",
					"command": "go.benchmark.cursor",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testFile && resourceLangId == go",
					"command": "go.test.file",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testPackage && resourceLangId == go",
					"command": "go.test.package",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForFunction && resourceLangId == go",
					"command": "go.test.generate.function",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForFile && resourceLangId == go",
					"command": "go.test.generate.file",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.generateTestForPackage && resourceLangId == go",
					"command": "go.test.generate.package",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.addImport && resourceLangId == go",
					"command": "go.import.add",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && config.go.editorContextMenuCommands.testCoverage && resourceLangId == go",
					"command": "go.test.coverage",
					"group": "Go group 1"
				},
				{
					"when": "editorTextFocus && resourceLangId == go",
					"command": "go.show.commands",
					"group": "Go group 2"
				}
			]
		}
	},
	"__metadata": {
		"id": "d6f6cfea-4b6f-41f4-b571-6ad2ab7918da",
		"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",
		"publisherDisplayName": "Microsoft"
	}
}